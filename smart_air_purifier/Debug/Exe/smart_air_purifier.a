;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;ï¿½ Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 22/12/2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega128
;Program type            : Application
;AVR Core Clock frequency: 10,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*******************************************************/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// SPI functions
;#include <spi.h>
;
;// Declare your global variables here
;#define CS_bar PORTB.0
;#define MCP3204_Command 0B00000100
;#define air_fresh PORTA.2
;
;bit start_bit = 0;
;int servo_ac = 0;
;int servo_ap = 0;
;
;unsigned char move_right[4]={1,2,4,8};

	.DSEG
;unsigned char move_left[4]={1,8,4,2};
;unsigned long int value, step;
;
;char text[16];
;float temperature;
;unsigned int dust;
;unsigned char counter, i;
;unsigned int data_temp, data_dust;
;
;//read adc spi
;unsigned int read_adc(unsigned char no_sensor)
; 0000 0037 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0038     unsigned int temp1, temp2;
; 0000 0039     CS_bar= 1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	no_sensor -> Y+4
;	temp1 -> R16,R17
;	temp2 -> R18,R19
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 003A     CS_bar= 0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 003B     temp1= spi(MCP3204_Command);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 003C     no_sensor= no_sensor<<6;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 003D     temp1=spi(no_sensor);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 003E     temp1= temp1 & 0x000F;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 003F     temp1= temp1<<8;
;PCODE: $00000022 VOL: 0
; 0000 0040     temp2= spi(0);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0041     temp2= temp2 & 0x00FF;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0042     temp1= temp1 + temp2;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0043     CS_bar= 1;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0044     return(temp1);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0045 }
;PCODE: $00000031 VOL: 0
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0049 {
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 004A // Place your code here
; 0000 004B  start_bit=0;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 004C  lcd_clear();
;PCODE: $00000037 VOL: 0
; 0000 004D  lcd_gotoxy(0,0);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 004E  lcd_putsf("Shutdown..!");
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 004F  delay_ms(1000);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0050  lcd_clear();
;PCODE: $00000041 VOL: 0
; 0000 0051  lcd_gotoxy(0,1);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0052  lcd_putsf("PRESS START...!");
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0053 }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0057 {
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0058 // Place your code here
; 0000 0059  start_bit = 1;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 005A }
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;
;// Timer1 output compare A interrupt service routine
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 005E {
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 005F // Place your code here
; 0000 0060 counter++; //counter=counter+1
;PCODE: $00000056 VOL: 0
; 0000 0061 if (counter == 15 && start_bit == 1)
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0062  {
; 0000 0063   air_fresh = 1;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0064   delay_ms(1000);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0065   air_fresh = 0;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0066   counter = 0;
;PCODE: $00000067 VOL: 0
; 0000 0067  }
; 0000 0068 }
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;
;void main(void)
; 0000 006B {
;PCODE: $0000006C VOL: 0
; 0000 006C // Declare your local variables here
; 0000 006D 
; 0000 006E // Input/Output Ports initialization
; 0000 006F // Port A initialization
; 0000 0070 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0071 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0072 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0073 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0074 
; 0000 0075 // Port B initialization
; 0000 0076 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
; 0000 0077 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0078 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=0
; 0000 0079 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 007A 
; 0000 007B // Port C initialization
; 0000 007C // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 007D DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 007E // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 007F PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0080 
; 0000 0081 // Port D initialization
; 0000 0082 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0083 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0084 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0085 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0086 
; 0000 0087 // Port E initialization
; 0000 0088 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0089 DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 008A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 008B PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 008C 
; 0000 008D // Port F initialization
; 0000 008E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 008F DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0090 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0091 PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0092 
; 0000 0093 // Port G initialization
; 0000 0094 // Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0095 DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0096 // State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0097 PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0098 
; 0000 0099 // Timer/Counter 1 initialization
; 0000 009A // Clock source: System Clock
; 0000 009B // Clock value: 39,063 kHz
; 0000 009C // Mode: CTC top=OCR1A
; 0000 009D // OC1A output: Disconnected
; 0000 009E // OC1B output: Disconnected
; 0000 009F // OC1C output: Disconnected
; 0000 00A0 // Noise Canceler: Off
; 0000 00A1 // Input Capture on Falling Edge
; 0000 00A2 // Timer Period: 1 s
; 0000 00A3 // Timer1 Overflow Interrupt: Off
; 0000 00A4 // Input Capture Interrupt: Off
; 0000 00A5 // Compare A Match Interrupt: On
; 0000 00A6 // Compare B Match Interrupt: Off
; 0000 00A7 // Compare C Match Interrupt: Off
; 0000 00A8 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00A9 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00AA TCNT1H=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00AB TCNT1L=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00AC ICR1H=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00AD ICR1L=0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00AE OCR1AH=0x98;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00AF OCR1AL=0x96;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00B0 OCR1BH=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00B1 OCR1BL=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00B2 OCR1CH=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00B3 OCR1CL=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00B4 
; 0000 00B5 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00B6 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00B7 // External Interrupt(s) initialization
; 0000 00B8 // INT0: On
; 0000 00B9 // INT0 Mode: Falling Edge
; 0000 00BA // INT1: On
; 0000 00BB // INT1 Mode: Falling Edge
; 0000 00BC // INT2: Off
; 0000 00BD // INT3: Off
; 0000 00BE // INT4: Off
; 0000 00BF // INT5: Off
; 0000 00C0 // INT6: Off
; 0000 00C1 // INT7: Off
; 0000 00C2 EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00C3 EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00C4 EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (1<<INT1) | (1<<INT0);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00C5 EIFR=(0<<INTF7) | (0<<INTF6) | (0<<INTF5) | (0<<INTF4) | (0<<INTF3) | (0<<INTF2) | (1<<INTF1) | (1<<INTF0);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00C6 
; 0000 00C7 // SPI initialization
; 0000 00C8 // SPI Type: Master
; 0000 00C9 // SPI Clock Rate: 156,250 kHz
; 0000 00CA // SPI Clock Phase: Cycle Start
; 0000 00CB // SPI Clock Polarity: Low
; 0000 00CC // SPI Data Order: MSB First
; 0000 00CD SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (1<<SPR1) | (0<<SPR0);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00CE SPSR=(0<<SPI2X);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00CF 
; 0000 00D0 // Alphanumeric LCD initialization
; 0000 00D1 // Connections are specified in the
; 0000 00D2 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00D3 // RS - PORTC Bit 0
; 0000 00D4 // RD - PORTC Bit 2
; 0000 00D5 // EN - PORTC Bit 1
; 0000 00D6 // D4 - PORTC Bit 4
; 0000 00D7 // D5 - PORTC Bit 5
; 0000 00D8 // D6 - PORTC Bit 6
; 0000 00D9 // D7 - PORTC Bit 7
; 0000 00DA // Characters/line: 16
; 0000 00DB lcd_init(16);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00DC 
; 0000 00DD // Global enable interrupts
; 0000 00DE #asm("sei")
;PCODE: $000000B1 VOL: 0
	sei
;PCODE: $000000B2 VOL: 0
; 0000 00DF 
; 0000 00E0   lcd_gotoxy(0,0);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00E1   lcd_putsf("   SMART AIR    ");
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00E2   lcd_gotoxy(0,1);
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00E3   lcd_putsf("    PURIFIER    ");
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00E4   delay_ms(1000);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00E5   lcd_clear();
;PCODE: $000000C3 VOL: 0
; 0000 00E6   lcd_gotoxy(0,1);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00E7   lcd_putsf(" PRESS START ");
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00E8 
; 0000 00E9 
; 0000 00EA while (1)
;PCODE: $000000CB VOL: 0
; 0000 00EB       {
; 0000 00EC       // Converting data
; 0000 00ED               lcd_clear();
;PCODE: $000000CC VOL: 0
; 0000 00EE               data_temp = read_adc(0);
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00EF               delay_ms(100);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00F0               temperature = (float)data_temp/4096*500-55;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00F1               data_dust = read_adc(2);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00F2               dust = (float)data_dust/4096*500-55;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00F3               delay_ms(100);
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00F4               lcd_gotoxy(0,0);
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00F5               sprintf(text,"%4.2fC %4d",temperature, dust);
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00F6               lcd_puts(text);
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00F7 
; 0000 00F8           if (start_bit == 1)
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00F9           {
; 0000 00FA                 if (dust <= 50)
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00FB                 {
; 0000 00FC                  lcd_gotoxy(0,1);
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00FD                  lcd_puts("");
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00FE                  lcd_puts("      AMAN      ");
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00FF                  servo_ap = 0;
;PCODE: $00000116 VOL: 0
; 0000 0100                  delay_ms(1500);
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0101                  break;
;PCODE: $00000119 VOL: 0
; 0000 0102                 }
; 0000 0103                 else if (50 < dust <= 200)
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0104                 {
; 0000 0105                  lcd_gotoxy(0,1);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0106                  lcd_puts("");
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0107                  lcd_puts("  TIDAK SEHAT   ");
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0108                  servo_ap = 1;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0109                  delay_ms(1500);
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 010A                  break;
;PCODE: $00000133 VOL: 0
; 0000 010B                 }
; 0000 010C                 else
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 010D                 {
; 0000 010E                  lcd_gotoxy(0,1);
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 010F                  lcd_puts("");
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0110                  lcd_puts("   BERBAHAYA    ");
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0111                  servo_ap = 1;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0112                  delay_ms(1500);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0113                  break;
;PCODE: $00000144 VOL: 0
; 0000 0114                 };
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 0115 
; 0000 0116                 if (temperature <= 26)
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 0117                 {
; 0000 0118                    servo_ac = 0;
;PCODE: $0000014B VOL: 0
; 0000 0119                    break;
;PCODE: $0000014C VOL: 0
; 0000 011A                 }
; 0000 011B                 else
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 011C                 {
; 0000 011D                    servo_ac = 1;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 011E                    break;
;PCODE: $00000151 VOL: 0
; 0000 011F                 };
;PCODE: $00000152 VOL: 0
; 0000 0120           }
; 0000 0121           else
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 0122           {
; 0000 0123              lcd_clear();
;PCODE: $00000155 VOL: 0
; 0000 0124              lcd_gotoxy(0,1);
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0125              lcd_putsf(" PRESS START ");
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 0126              break;
;PCODE: $0000015D VOL: 0
; 0000 0127           }
;PCODE: $0000015E VOL: 0
; 0000 0128 
; 0000 0129                 if (servo_ac == 1)
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 012A                 {
; 0000 012B                    for (step=0; step<=value-1; step++)
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 012C                     {
; 0000 012D                      i= step % 4;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 012E                      PORTA.0 = move_right[i];
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 012F                      delay_ms(100);
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0130 
; 0000 0131                     };
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 0132                 }
; 0000 0133                 else
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0134                 {
; 0000 0135                     for (step=0; step<=value-1; step++)
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 0136                     {
; 0000 0137                      i= step % 4;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 0138                      PORTA.0 = move_left[i];
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 0139                      delay_ms(100);
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 013A 
; 0000 013B                     };
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 013C                 };
;PCODE: $000001B2 VOL: 0
; 0000 013D 
; 0000 013E                 if (servo_ap == 1)
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 013F                 {
; 0000 0140                    for (step=0; step<=value-1; step++)
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 0141                     {
; 0000 0142                      i= step % 4;
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 0143                      PORTA.1 = move_right[i];
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 0144                      delay_ms(100);
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 0145 
; 0000 0146                     };
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 0147                 }
; 0000 0148                 else
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 0149                 {
; 0000 014A                     for (step=0; step<=value-1; step++)
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 014B                     {
; 0000 014C                      i= step % 4;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 014D                      PORTA.1 = move_left[i];
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 014E                      delay_ms(100);
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 014F 
; 0000 0150                     };
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 0151                 };
;PCODE: $00000206 VOL: 0
; 0000 0152           delay_ms(1000);
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 0153       };
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 0154 }
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0

	.DSEG
_0x17:
	.BYTE 0x36
