/*******************************************************
This program was created by the
CodeWizardAVR V3.12 Advanced
Automatic Program Generator
ï¿½ Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : 
Version : 
Date    : 22/12/2021
Author  : 
Company : 
Comments: 


Chip type               : ATmega128
Program type            : Application
AVR Core Clock frequency: 10,000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 1024
*******************************************************/

#include <mega128.h>
#include <delay.h>
#include <stdio.h>

// Alphanumeric LCD functions
#include <alcd.h>

// SPI functions
#include <spi.h>

// Declare your global variables here
#define CS_bar PORTB.0
#define MCP3204_Command 0B00000100
#define air_fresh PORTA.2

bit start_bit = 0;
int servo_ac = 0;
int servo_ap = 0;

unsigned char move_right[4]={1,2,4,8};
unsigned char move_left[4]={1,8,4,2};
unsigned long int value, step;

char text[16];
float temperature;
unsigned int dust;
unsigned char counter, i;
unsigned int data_temp, data_dust;

//read adc spi
unsigned int read_adc(unsigned char no_sensor)
{
    unsigned int temp1, temp2;
    CS_bar= 1;
    CS_bar= 0;
    temp1= spi(MCP3204_Command);
    no_sensor= no_sensor<<6;
    temp1=spi(no_sensor);
    temp1= temp1 & 0x000F;
    temp1= temp1<<8;
    temp2= spi(0);
    temp2= temp2 & 0x00FF;
    temp1= temp1 + temp2;
    CS_bar= 1;
    return(temp1);
}

// External Interrupt 0 service routine
interrupt [EXT_INT0] void ext_int0_isr(void)
{
// Place your code here
 start_bit=0;
 lcd_clear();
 lcd_gotoxy(0,0);
 lcd_putsf("Shutdown..!");
 delay_ms(1000);
 lcd_clear();
 lcd_gotoxy(0,1);
 lcd_putsf("PRESS START...!");
}

// External Interrupt 1 service routine
interrupt [EXT_INT1] void ext_int1_isr(void)
{
// Place your code here
 start_bit = 1;
}

// Timer1 output compare A interrupt service routine
interrupt [TIM1_COMPA] void timer1_compa_isr(void)
{
// Place your code here
counter++; //counter=counter+1
if (counter == 15 && start_bit == 1)
 {
  air_fresh = 1;
  delay_ms(1000);
  air_fresh = 0;
  counter = 0;
 }  
}

void main(void)
{
// Declare your local variables here

// Input/Output Ports initialization
// Port A initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);

// Port B initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out 
DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=0 
PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);

// Port C initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

// Port D initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);

// Port E initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);

// Port F initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);

// Port G initialization
// Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
// State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: 39,063 kHz
// Mode: CTC top=OCR1A
// OC1A output: Disconnected
// OC1B output: Disconnected
// OC1C output: Disconnected
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer Period: 1 s
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: On
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x98;
OCR1AL=0x96;
OCR1BH=0x00;
OCR1BL=0x00;
OCR1CH=0x00;
OCR1CL=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
// External Interrupt(s) initialization
// INT0: On
// INT0 Mode: Falling Edge
// INT1: On
// INT1 Mode: Falling Edge
// INT2: Off
// INT3: Off
// INT4: Off
// INT5: Off
// INT6: Off
// INT7: Off
EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (1<<INT1) | (1<<INT0);
EIFR=(0<<INTF7) | (0<<INTF6) | (0<<INTF5) | (0<<INTF4) | (0<<INTF3) | (0<<INTF2) | (1<<INTF1) | (1<<INTF0);

// SPI initialization
// SPI Type: Master
// SPI Clock Rate: 156,250 kHz
// SPI Clock Phase: Cycle Start
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (1<<SPR1) | (0<<SPR0);
SPSR=(0<<SPI2X);

// Alphanumeric LCD initialization
// Connections are specified in the
// Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
// RS - PORTC Bit 0
// RD - PORTC Bit 2
// EN - PORTC Bit 1
// D4 - PORTC Bit 4
// D5 - PORTC Bit 5
// D6 - PORTC Bit 6
// D7 - PORTC Bit 7
// Characters/line: 16
lcd_init(16);

// Global enable interrupts
#asm("sei")

  lcd_gotoxy(0,0);
  lcd_putsf("   SMART AIR    ");
  lcd_gotoxy(0,1);
  lcd_putsf("    PURIFIER    ");
  delay_ms(1000);
  lcd_clear();
  lcd_gotoxy(0,1);
  lcd_putsf(" PRESS START ");


while (1)
      {
      // Converting data  
              lcd_clear();
              data_temp = read_adc(0);
              delay_ms(100);
              temperature = (float)data_temp/4096*500-55;
              data_dust = read_adc(2);
              dust = (float)data_dust/4096*500-55;
              delay_ms(100);
              lcd_gotoxy(0,0);
              sprintf(text,"%4.2fC %4d",temperature, dust);
              lcd_puts(text);
              
          if (start_bit == 1)
          {   
                if (dust <= 50)
                {
                 lcd_gotoxy(0,1);
                 lcd_puts("");
                 lcd_puts("      AMAN      ");
                 servo_ap = 0;
                 delay_ms(1500);
                 break;
                }
                else if (50 < dust <= 200)
                {
                 lcd_gotoxy(0,1);
                 lcd_puts("");
                 lcd_puts("  TIDAK SEHAT   ");
                 servo_ap = 1;
                 delay_ms(1500);
                 break;
                }
                else
                {
                 lcd_gotoxy(0,1);
                 lcd_puts("");
                 lcd_puts("   BERBAHAYA    ");
                 servo_ap = 1;
                 delay_ms(1500);
                 break;
                };

                if (temperature <= 26)
                {
                   servo_ac = 0;
                   break;
                }
                else
                {
                   servo_ac = 1;
                   break;
                }; 
          }
          else 
          {
             lcd_clear();
             lcd_gotoxy(0,1);
             lcd_putsf(" PRESS START ");
          }
          
                if (servo_ac == 1)
                {
                   for (step=0; step<=value-1; step++)
                    {
                     i= step % 4;
                     PORTA.0 = move_right[i];
                     delay_ms(100);

                    };
                }
                else
                {
                    for (step=0; step<=value-1; step++)
                    {
                     i= step % 4;
                     PORTA.0 = move_left[i];
                     delay_ms(100);

                    };
                };
                
                if (servo_ap == 1)
                {
                   for (step=0; step<=value-1; step++)
                    {
                     i= step % 4;
                     PORTA.1 = move_right[i];
                     delay_ms(100);

                    };
                }
                else
                {
                    for (step=0; step<=value-1; step++)
                    {
                     i= step % 4;
                     PORTA.1 = move_left[i];
                     delay_ms(100);

                    };
                };          
          delay_ms(1000);
      };
}
