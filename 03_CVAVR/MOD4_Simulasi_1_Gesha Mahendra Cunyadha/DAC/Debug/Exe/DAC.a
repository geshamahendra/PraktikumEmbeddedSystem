;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;ï¿½ Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 10/26/2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega128
;Program type            : Application
;AVR Core Clock frequency: 10.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*******************************************************/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;#define CS_bar PORTD.4
;#define WR_bar PORTD.5
;#define Inp_Port PORTE
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;char textbuff1[16];
;char textbuff2[16];
;unsigned char data;
;float avalue;
;int data_adc;
;
;void send2DAC(unsigned char data_inp)
; 0000 002A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002B       CS_bar=1;
;PCODE: $0000000F VOL: 0
;	data_inp -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 002C       CS_bar=0;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 002D       Inp_Port= data_inp;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002E       WR_bar=1;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002F       WR_bar=0;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0030       WR_bar=1;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0031       CS_bar=1;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0032 }
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (1<<ADLAR))
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 003A {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 003B ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $00000023 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 003C // Delay needed for the stabilization of the ADC input voltage
; 0000 003D delay_ms(1);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 003E // Start the AD conversion
; 0000 003F ADCSRA|=(1<<ADSC);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0040 // Wait for the AD conversion to complete
; 0000 0041 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0042 ADCSRA|=(1<<ADIF);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0043 return ADCH;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0044 }
;PCODE: $00000037 VOL: 0
;
;void main(void)
; 0000 0047 {
;PCODE: $00000038 VOL: 0
; 0000 0048 // Declare your local variables here
; 0000 0049 
; 0000 004A // Input/Output Ports initialization
; 0000 004B // Port C initialization
; 0000 004C // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 004D DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 004E // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 004F PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0050 
; 0000 0051 // Port D initialization
; 0000 0052 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0053 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0054 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0055 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0056 
; 0000 0057 // Port E initialization
; 0000 0058 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0059 DDRE=(1<<DDE7) | (1<<DDE6) | (1<<DDE5) | (1<<DDE4) | (1<<DDE3) | (1<<DDE2) | (1<<DDE1) | (1<<DDE0);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 005A // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 005B PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 005C 
; 0000 005D // ADC initialization
; 0000 005E // ADC Clock frequency: 625,000 kHz
; 0000 005F // ADC Voltage Reference: AVCC pin
; 0000 0060 // Only the 8 most significant bits of
; 0000 0061 // the AD conversion result are used
; 0000 0062 ADMUX=ADC_VREF_TYPE;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0063 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0064 SFIOR=(0<<ACME);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0065 
; 0000 0066 // Alphanumeric LCD initialization
; 0000 0067 // Connections are specified in the
; 0000 0068 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0069 // RS - PORTC Bit 0
; 0000 006A // RD - PORTC Bit 2
; 0000 006B // EN - PORTC Bit 1
; 0000 006C // D4 - PORTC Bit 4
; 0000 006D // D5 - PORTC Bit 5
; 0000 006E // D6 - PORTC Bit 6
; 0000 006F // D7 - PORTC Bit 7
; 0000 0070 // Characters/line: 16
; 0000 0071 lcd_init(16);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0072 
; 0000 0073 while (1)
;PCODE: $0000004D VOL: 0
; 0000 0074       {
; 0000 0075       // Place your code here
; 0000 0076       for (data=0; data<=255; data++)
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0077       {
; 0000 0078       lcd_clear();
;PCODE: $00000055 VOL: 0
; 0000 0079       data_adc = read_adc(0);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 007A       lcd_gotoxy(0,0);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 007B       sprintf(textbuff1, "ADC = %3d", data_adc);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 007C       lcd_puts(textbuff1);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 007D 
; 0000 007E       send2DAC(data);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 007F       avalue = (float)data/255*5.0;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0080       lcd_gotoxy(0,1);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0081       sprintf(textbuff2, "DAC = %3.2f V", avalue);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0082       lcd_puts(textbuff2);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0083       delay_ms(50);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0084       };
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0085       }
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0086 }
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
