;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;ï¿½ Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 10/24/2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega128
;Program type            : Application
;AVR Core Clock frequency: 10.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*******************************************************/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;#include <math.h>
;#include <stdlib.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;float data_adc0, data_adc1;
;float tegangan0, tegangan1;
;float selisih;
;char LCDBuffer[16];
;int led = 0b00000000;
;
;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 002E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002F ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0030 // Delay needed for the stabilization of the ADC input voltage
; 0000 0031 delay_ms(1);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0032 // Start the AD conversion
; 0000 0033 ADCSRA|=(1<<ADSC);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0034 // Wait for the AD conversion to complete
; 0000 0035 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0036 ADCSRA|=(1<<ADIF);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0037 return ADCW;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0038 }
;PCODE: $00000023 VOL: 0
;
;void main(void)
; 0000 003B {
;PCODE: $00000024 VOL: 0
; 0000 003C // Declare your local variables here
; 0000 003D 
; 0000 003E // Input/Output Ports initialization
; 0000 003F // Port A initialization
; 0000 0040 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0041 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0042 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0043 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0044 
; 0000 0045 // Port B initialization
; 0000 0046 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0047 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0048 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0049 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 004A 
; 0000 004B // Port C initialization
; 0000 004C // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 004D DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 004E // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 004F PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0050 
; 0000 0051 // Port D initialization
; 0000 0052 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0053 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0054 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0055 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0056 
; 0000 0057 // Port E initialization
; 0000 0058 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0059 DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 005A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 005B PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 005C 
; 0000 005D // Port F initialization
; 0000 005E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 005F DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0060 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0061 PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0062 
; 0000 0063 // Port G initialization
; 0000 0064 // Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0065 DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0066 // State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0067 PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0068 
; 0000 0069 // Analog Comparator initialization
; 0000 006A // Analog Comparator: Off
; 0000 006B // The Analog Comparator's positive input is
; 0000 006C // connected to the AIN0 pin
; 0000 006D // The Analog Comparator's negative input is
; 0000 006E // connected to the AIN1 pin
; 0000 006F ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0070 
; 0000 0071 // ADC initialization
; 0000 0072 // ADC Clock frequency: 625.000 kHz
; 0000 0073 // ADC Voltage Reference: AVCC pin
; 0000 0074 ADMUX=ADC_VREF_TYPE;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0075 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0076 SFIOR=(0<<ACME);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0077 
; 0000 0078 // Alphanumeric LCD initialization
; 0000 0079 // Connections are specified in the
; 0000 007A // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 007B // RS - PORTC Bit 0
; 0000 007C // RD - PORTC Bit 2
; 0000 007D // EN - PORTC Bit 1
; 0000 007E // D4 - PORTC Bit 4
; 0000 007F // D5 - PORTC Bit 5
; 0000 0080 // D6 - PORTC Bit 6
; 0000 0081 // D7 - PORTC Bit 7
; 0000 0082 // Characters/line: 16
; 0000 0083 lcd_init(16);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0084 
; 0000 0085 while (1)
;PCODE: $0000004B VOL: 0
; 0000 0086       {
; 0000 0087       // Place your code here
; 0000 0088       lcd_clear();
;PCODE: $0000004C VOL: 0
; 0000 0089       data_adc0 = read_adc(0);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 008A       tegangan0 = data_adc0*4/1023;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 008B       data_adc1 = read_adc(1);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 008C       tegangan1 = data_adc1*4/1023;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 008D 
; 0000 008E       lcd_gotoxy(0,0);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 008F       sprintf(LCDBuffer,"%1.2f V -- %1.2f V", tegangan0, tegangan1);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0090       lcd_puts(LCDBuffer);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0091 
; 0000 0092       selisih = fabs(tegangan0-tegangan1);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0093 
; 0000 0094       lcd_gotoxy(0,1);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0095       sprintf(LCDBuffer,"Selisih = %1.2f V", selisih);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0096       lcd_puts(LCDBuffer);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0097       delay_ms(100);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0098 
; 0000 0099       PORTB = led;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 009A       if (selisih == 0){
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 009B           led = 0b00000000;
;PCODE: $00000097 VOL: 0
; 0000 009C         } else if (selisih < 1){
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 009D           led = 0b11000000;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 009E         } else if (selisih < 2){
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 009F           led = 0b11110000;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00A0         } else if (selisih < 3){
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00A1           led = 0b11111100;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00A2         } else if (selisih < 4){
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00A3           led = 0b11111111;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00A4         } else {
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00A5           if (led == 0B10101010)
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00A6         { led = 0B01010101;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00A7         } else {
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00A8           led = 0B10101010;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00A9           };
;PCODE: $000000C3 VOL: 0
; 0000 00AA         };
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00AB       delay_ms(500);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00AC       }
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00AD }
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
