;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 11/16/2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega128
;Program type            : Application
;AVR Core Clock frequency: 10.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*******************************************************/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// SPI functions
;#include <spi.h>
;
;// Declare your global variables here
;#define CS_bar PORTB.4
;#define LDAC PORTB.5
;
;unsigned int data=0;
;char text[16];
;unsigned char MCP4921_Command= 0B01110000;
;float tegangan;
;
;void send2DACMCP4921(unsigned int data)
; 0000 002C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002D     unsigned int temp;
; 0000 002E     unsigned char low_byte_data, high_byte_data;
; 0000 002F     temp= MCP4921_Command;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	data -> Y+4
;	temp -> R16,R17
;	low_byte_data -> R19
;	high_byte_data -> R18
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0030     temp= temp<<8;
;PCODE: $00000014 VOL: 0
; 0000 0031     data= data + temp;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0032     low_byte_data= data;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0033     high_byte_data= data>>8;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0034     LDAC= 1;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0035     CS_bar= 1;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0036     CS_bar= 0;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0037     spi(high_byte_data);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0038     spi(low_byte_data);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0039     CS_bar= 1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 003A     LDAC= 0;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 003B     LDAC= 1;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003C }
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0040 {
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0041 // Place your code here
; 0000 0042  data = data+1;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0043 }
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0047 {
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0048 // Place your code here
; 0000 0049  data = data-1;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 004A }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;
;void main(void)
; 0000 004D {
;PCODE: $00000041 VOL: 0
; 0000 004E // Declare your local variables here
; 0000 004F 
; 0000 0050 // Input/Output Ports initialization
; 0000 0051 // Port B initialization
; 0000 0052 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
; 0000 0053 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0054 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=0
; 0000 0055 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0056 
; 0000 0057 // Port C initialization
; 0000 0058 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0059 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 005A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 005B PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 005C 
; 0000 005D // External Interrupt(s) initialization
; 0000 005E // INT0: On
; 0000 005F // INT0 Mode: Falling Edge
; 0000 0060 // INT1: On
; 0000 0061 // INT1 Mode: Falling Edge
; 0000 0062 // INT2: Off
; 0000 0063 // INT3: Off
; 0000 0064 // INT4: Off
; 0000 0065 // INT5: Off
; 0000 0066 // INT6: Off
; 0000 0067 // INT7: Off
; 0000 0068 EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0069 EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 006A EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (1<<INT1) | (1<<INT0);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 006B EIFR=(0<<INTF7) | (0<<INTF6) | (0<<INTF5) | (0<<INTF4) | (0<<INTF3) | (0<<INTF2) | (1<<INTF1) | (1<<INTF0);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 006C 
; 0000 006D // SPI initialization
; 0000 006E // SPI Type: Master
; 0000 006F // SPI Clock Rate: 156.250 kHz
; 0000 0070 // SPI Clock Phase: Cycle Start
; 0000 0071 // SPI Clock Polarity: Low
; 0000 0072 // SPI Data Order: MSB First
; 0000 0073 SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (1<<SPR1) | (0<<SPR0);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0074 SPSR=(0<<SPI2X);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0075 
; 0000 0076 // Alphanumeric LCD initialization
; 0000 0077 // Connections are specified in the
; 0000 0078 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0079 // RS - PORTC Bit 0
; 0000 007A // RD - PORTC Bit 2
; 0000 007B // EN - PORTC Bit 1
; 0000 007C // D4 - PORTC Bit 4
; 0000 007D // D5 - PORTC Bit 5
; 0000 007E // D6 - PORTC Bit 6
; 0000 007F // D7 - PORTC Bit 7
; 0000 0080 // Characters/line: 16
; 0000 0081 lcd_init(16);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0082 
; 0000 0083 // Global enable interrupts
; 0000 0084 #asm("sei")
;PCODE: $00000058 VOL: 0
	sei
;PCODE: $00000059 VOL: 0
; 0000 0085 
; 0000 0086 lcd_gotoxy(0,0);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0087 lcd_putsf("Read DAC MCP4921");
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0088 
; 0000 0089 while (1)
;PCODE: $00000061 VOL: 0
; 0000 008A       {
; 0000 008B       // Place your code here
; 0000 008C       send2DACMCP4921(data);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 008D       tegangan = (float)data/4096*5.0;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 008E       sprintf(text,"Voltase = %5.3f V",tegangan);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 008F       lcd_gotoxy(0,1);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0090       lcd_puts(text);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0091       delay_ms(100);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0092       }
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0093 }
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
