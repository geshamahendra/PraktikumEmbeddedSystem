
AVRASM ver. 2.1.30  D:\gesha\OneDrive - UNIVERSITAS INDONESIA\Kuliah\Semester 5\Sistem Tertanam\03_CVAVR\MOD3_Simulasi_1_Gesha Mahendra Cunyadha\Debug\List\MOD3_Simulasi_1_Gesha Mahendra Cunyadha.asm Wed Oct 13 12:35:33 2021

D:\gesha\OneDrive - UNIVERSITAS INDONESIA\Kuliah\Semester 5\Sistem Tertanam\03_CVAVR\MOD3_Simulasi_1_Gesha Mahendra Cunyadha\Debug\List\MOD3_Simulasi_1_Gesha Mahendra Cunyadha.asm(1090): warning: Register r4 already defined by the .DEF directive
D:\gesha\OneDrive - UNIVERSITAS INDONESIA\Kuliah\Semester 5\Sistem Tertanam\03_CVAVR\MOD3_Simulasi_1_Gesha Mahendra Cunyadha\Debug\List\MOD3_Simulasi_1_Gesha Mahendra Cunyadha.asm(1091): warning: Register r5 already defined by the .DEF directive
D:\gesha\OneDrive - UNIVERSITAS INDONESIA\Kuliah\Semester 5\Sistem Tertanam\03_CVAVR\MOD3_Simulasi_1_Gesha Mahendra Cunyadha\Debug\List\MOD3_Simulasi_1_Gesha Mahendra Cunyadha.asm(1092): warning: Register r6 already defined by the .DEF directive
D:\gesha\OneDrive - UNIVERSITAS INDONESIA\Kuliah\Semester 5\Sistem Tertanam\03_CVAVR\MOD3_Simulasi_1_Gesha Mahendra Cunyadha\Debug\List\MOD3_Simulasi_1_Gesha Mahendra Cunyadha.asm(1093): warning: Register r7 already defined by the .DEF directive
D:\gesha\OneDrive - UNIVERSITAS INDONESIA\Kuliah\Semester 5\Sistem Tertanam\03_CVAVR\MOD3_Simulasi_1_Gesha Mahendra Cunyadha\Debug\List\MOD3_Simulasi_1_Gesha Mahendra Cunyadha.asm(1094): warning: Register r8 already defined by the .DEF directive
D:\gesha\OneDrive - UNIVERSITAS INDONESIA\Kuliah\Semester 5\Sistem Tertanam\03_CVAVR\MOD3_Simulasi_1_Gesha Mahendra Cunyadha\Debug\List\MOD3_Simulasi_1_Gesha Mahendra Cunyadha.asm(1095): warning: Register r9 already defined by the .DEF directive
D:\gesha\OneDrive - UNIVERSITAS INDONESIA\Kuliah\Semester 5\Sistem Tertanam\03_CVAVR\MOD3_Simulasi_1_Gesha Mahendra Cunyadha\Debug\List\MOD3_Simulasi_1_Gesha Mahendra Cunyadha.asm(1096): warning: Register r10 already defined by the .DEF directive
D:\gesha\OneDrive - UNIVERSITAS INDONESIA\Kuliah\Semester 5\Sistem Tertanam\03_CVAVR\MOD3_Simulasi_1_Gesha Mahendra Cunyadha\Debug\List\MOD3_Simulasi_1_Gesha Mahendra Cunyadha.asm(1097): warning: Register r11 already defined by the .DEF directive
D:\gesha\OneDrive - UNIVERSITAS INDONESIA\Kuliah\Semester 5\Sistem Tertanam\03_CVAVR\MOD3_Simulasi_1_Gesha Mahendra Cunyadha\Debug\List\MOD3_Simulasi_1_Gesha Mahendra Cunyadha.asm(1098): warning: Register r12 already defined by the .DEF directive
D:\gesha\OneDrive - UNIVERSITAS INDONESIA\Kuliah\Semester 5\Sistem Tertanam\03_CVAVR\MOD3_Simulasi_1_Gesha Mahendra Cunyadha\Debug\List\MOD3_Simulasi_1_Gesha Mahendra Cunyadha.asm(1099): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 10.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R4
                 	.DEF _i_msb=R5
                 	.DEF _j=R6
                 	.DEF _j_msb=R7
                 	.DEF _k=R8
                 	.DEF _k_msb=R9
                 	.DEF _counter=R10
                 	.DEF _counter_msb=R11
                 	.DEF _counter1=R12
                 	.DEF _counter1_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 007c 	JMP  __RESET
000002 940c 00ac 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 011f 	JMP  _timer1_compa_isr
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00004f 0000      	.DB  0x0,0x0
                 
                 _0x3:
000050 4547
000051 4853
000052 1441
000053 2e4d      	.DB  0x47,0x45,0x53,0x48,0x41,0x14,0x4D,0x2E
000054 4314
D:\gesha\OneDrive - UNIVERSITAS INDONESIA\Kuliah\Semester 5\Sistem Tertanam\03_CVAVR\MOD3_Simulasi_1_Gesha Mahendra Cunyadha\Debug\List\MOD3_Simulasi_1_Gesha Mahendra Cunyadha.asm(1156): warning: .cseg .db misalignment - padding zero byte
000055 002e      	.DB  0x14,0x43,0x2E
                 _0x0:
000056 6f43
000057 6e75
000058 6574
000059 3d72      	.DB  0x43,0x6F,0x75,0x6E,0x74,0x65,0x72,0x3D
00005a 2520
00005b 352d
00005c 0064
00005d 6f43      	.DB  0x20,0x25,0x2D,0x35,0x64,0x0,0x43,0x6F
00005e 6e75
00005f 6574
000060 3d72
000061 0020      	.DB  0x75,0x6E,0x74,0x65,0x72,0x3D,0x20,0x0
000062 6f43
000063 6e75
000064 6574
000065 3d72      	.DB  0x43,0x6F,0x75,0x6E,0x74,0x65,0x72,0x3D
000066 2020
000067 0020      	.DB  0x20,0x20,0x20,0x0
                 _0x2000003:
000068 c080      	.DB  0x80,0xC0
                 _0x20A0060:
D:\gesha\OneDrive - UNIVERSITAS INDONESIA\Kuliah\Semester 5\Sistem Tertanam\03_CVAVR\MOD3_Simulasi_1_Gesha Mahendra Cunyadha\Debug\List\MOD3_Simulasi_1_Gesha Mahendra Cunyadha.asm(1166): warning: .cseg .db misalignment - padding zero byte
000069 0001      	.DB  0x1
                 _0x20A0000:
00006a 4e2d
00006b 4e41
00006c 4900
00006d 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\gesha\OneDrive - UNIVERSITAS INDONESIA\Kuliah\Semester 5\Sistem Tertanam\03_CVAVR\MOD3_Simulasi_1_Gesha Mahendra Cunyadha\Debug\List\MOD3_Simulasi_1_Gesha Mahendra Cunyadha.asm(1169): warning: .cseg .db misalignment - padding zero byte
00006e 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00006f 0002      	.DW  0x02
000070 000c      	.DW  0x0C
000071 009e      	.DW  __REG_VARS*2
                 
000072 000b      	.DW  0x0B
000073 0514      	.DW  _nama
000074 00a0      	.DW  _0x3*2
                 
000075 0002      	.DW  0x02
000076 0524      	.DW  __base_y_G100
000077 00d0      	.DW  _0x2000003*2
                 
000078 0001      	.DW  0x01
000079 052b      	.DW  __seed_G105
00007a 00d2      	.DW  _0x20A0060*2
                 
                 _0xFFFFFFFF:
00007b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00007c 94f8      	CLI
00007d 27ee      	CLR  R30
00007e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00007f e0f1      	LDI  R31,1
000080 bff5      	OUT  MCUCR,R31
000081 bfe5      	OUT  MCUCR,R30
000082 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000084 e08d      	LDI  R24,(14-2)+1
000085 e0a2      	LDI  R26,2
000086 27bb      	CLR  R27
                 __CLEAR_REG:
000087 93ed      	ST   X+,R30
000088 958a      	DEC  R24
000089 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00008a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00008b e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00008c e0a0      	LDI  R26,LOW(__SRAM_START)
00008d e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00008e 93ed      	ST   X+,R30
00008f 9701      	SBIW R24,1
000090 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000091 edee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000092 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000093 9185      	LPM  R24,Z+
000094 9195      	LPM  R25,Z+
000095 9700      	SBIW R24,0
000096 f061      	BREQ __GLOBAL_INI_END
000097 91a5      	LPM  R26,Z+
000098 91b5      	LPM  R27,Z+
000099 9005      	LPM  R0,Z+
00009a 9015      	LPM  R1,Z+
00009b 01bf      	MOVW R22,R30
00009c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00009d 9005      	LPM  R0,Z+
00009e 920d      	ST   X+,R0
00009f 9701      	SBIW R24,1
0000a0 f7e1      	BRNE __GLOBAL_INI_LOOP
0000a1 01fb      	MOVW R30,R22
0000a2 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0000a3 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000a4 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000a5 bfed      	OUT  SPL,R30
0000a6 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000a7 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000a8 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000a9 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000aa 940c 0143 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : MOD3-Simulasi
                 ;Version :
                 ;Date    : 10/10/2021
                 ;Author  : Gesha Mahendra C
                 ;Company : Univeritas Indonesia-Fisika
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega128
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 10.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 1024
                 ;*******************************************************/
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;//Delay function
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <math.h>
                 ;
                 ;// Declare your global variables here
                 ;int i,j,k;                                      //Variabel untuk looping
                 ;int counter,counter1 = 0;                       //Variabel untuk counter
                 ;int prima;                                      //Variabel untuk bilangan prima
                 ;int led;                                        //Variabel untuk menentukan apakah LED mati/menyala
                 ;char textbuff[16];                              //Variabel untuk menampilkan counter ke LCD
                 ;char nama[16]={'G','E','S','H','A',20,'M','.',20,'C','.'};  //variabel nama
                 
                 	.DSEG
                 ;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 002C {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
0000ac 920a      	ST   -Y,R0
0000ad 921a      	ST   -Y,R1
0000ae 92fa      	ST   -Y,R15
0000af 936a      	ST   -Y,R22
0000b0 937a      	ST   -Y,R23
0000b1 938a      	ST   -Y,R24
0000b2 939a      	ST   -Y,R25
0000b3 93aa      	ST   -Y,R26
0000b4 93ba      	ST   -Y,R27
0000b5 93ea      	ST   -Y,R30
0000b6 93fa      	ST   -Y,R31
0000b7 b7ef      	IN   R30,SREG
0000b8 93ea      	ST   -Y,R30
                 ; 0000 002D // Place your code here
                 ; 0000 002E counter++;                                      //Setiap INT0 ditekan, maka nilai counter akan bertambah 1
0000b9 01f5      	MOVW R30,R10
0000ba 9631      	ADIW R30,1
0000bb 015f      	MOVW R10,R30
                 ; 0000 002F     prima = 1;
0000bc e0e1      	LDI  R30,LOW(1)
0000bd e0f0      	LDI  R31,HIGH(1)
0000be 93e0 0500 	STS  _prima,R30
0000c0 93f0 0501 	STS  _prima+1,R31
                 ; 0000 0030     for (k=2;k<=sqrt(counter);k++){             //Program untuk menentukan apakah nilai counter merupakan bilangan prima ...
0000c2 e0e2      	LDI  R30,LOW(2)
0000c3 e0f0      	LDI  R31,HIGH(2)
0000c4 014f      	MOVW R8,R30
                 _0x5:
0000c5 01f5      	MOVW R30,R10
0000c6 940e 05fd 	CALL __CWD1
0000c8 940e 04ce 	CALL __CDF1
0000ca 01df      	MOVW R26,R30
0000cb 01cb      	MOVW R24,R22
0000cc 940e 05b6 	CALL _sqrt
0000ce 01d4      	MOVW R26,R8
0000cf 940e 0602 	CALL __CWD2
0000d1 940e 063c 	CALL __CDF2
0000d3 940e 0596 	CALL __CMPF12
0000d5 f011      	BREQ PC+3
0000d6 f008      	BRCS PC+2
0000d7 c010      	RJMP _0x6
                 ; 0000 0031     if(counter%k == 0){
0000d8 01f4      	MOVW R30,R8
0000d9 01d5      	MOVW R26,R10
0000da 940e 061a 	CALL __MODW21
0000dc 9730      	SBIW R30,0
0000dd f431      	BRNE _0x7
                 ; 0000 0032     prima = 0;
0000de e0e0      	LDI  R30,LOW(0)
0000df 93e0 0500 	STS  _prima,R30
0000e1 93e0 0501 	STS  _prima+1,R30
                 ; 0000 0033     break;
0000e3 c004      	RJMP _0x6
                 ; 0000 0034         }
                 ; 0000 0035     }
                 _0x7:
0000e4 01f4      	MOVW R30,R8
0000e5 9631      	ADIW R30,1
0000e6 014f      	MOVW R8,R30
0000e7 cfdd      	RJMP _0x5
                 _0x6:
                 ; 0000 0036     if (counter == 1 ){                         //Karena Program di atas dimulai untuk angka 2 ke atas maka untuk 1 kare ...
0000e8 e0e1      	LDI  R30,LOW(1)
0000e9 e0f0      	LDI  R31,HIGH(1)
0000ea 15ea      	CP   R30,R10
0000eb 05fb      	CPC  R31,R11
0000ec f429      	BRNE _0x8
                 ; 0000 0037     prima = 0;
0000ed e0e0      	LDI  R30,LOW(0)
0000ee 93e0 0500 	STS  _prima,R30
0000f0 93e0 0501 	STS  _prima+1,R30
                 ; 0000 0038     }
                 ; 0000 0039     if (prima == 1) {                           //Jika bilangan di counter adalah prima
                 _0x8:
0000f2 91a0 0500 	LDS  R26,_prima
0000f4 91b0 0501 	LDS  R27,_prima+1
0000f6 9711      	SBIW R26,1
0000f7 f441      	BRNE _0x9
                 ; 0000 003A     counter1 = counter;                         //Nilai counter diisi ke counter1
0000f8 0165      	MOVW R12,R10
                 ; 0000 003B     sprintf(textbuff,"Counter= %-5d",counter1); //Nilai counter1 disalin ke buff
0000f9 940e 0439 	CALL SUBOPT_0x0
                +
0000fb eaec     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000fc e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000fd 940e 043e 	CALL SUBOPT_0x1
                 ; 0000 003C     lcd_gotoxy(0,1);
0000ff c00e      	RJMP _0x1A
                 ; 0000 003D     lcd_puts(textbuff);                         //Meletakkan buff di LCD pada baris ke 1, kolom ke 0
                 ; 0000 003E     }
                 ; 0000 003F     else {                                      //Jika bilangan di counter adalah bukan prima
                 _0x9:
                 ; 0000 0040     counter1 = counter1;                        //Nilai counter1 tidak berubah dari nilai sebelumnya
000100 0166      	MOVW R12,R12
                 ; 0000 0041     if (counter1 == 0) {                        //Jika counter1 bernilai 0 atau belum pernah berubah
000101 2c0c      	MOV  R0,R12
000102 280d      	OR   R0,R13
000103 f451      	BRNE _0xB
                 ; 0000 0042     sprintf(textbuff,"Counter= ");
000104 940e 0439 	CALL SUBOPT_0x0
                +
000106 ebea     +LDI R30 , LOW ( 2 * _0x0 + ( 14 ) )
000107 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 14 ) )
                 	__POINTW1FN _0x0,14
000108 93fa      	ST   -Y,R31
000109 93ea      	ST   -Y,R30
00010a e080      	LDI  R24,0
00010b 940e 03ec 	CALL _sprintf
00010d 9624      	ADIW R28,4
                 ; 0000 0043     }
                 ; 0000 0044     lcd_gotoxy(0,1);
                 _0xB:
                 _0x1A:
00010e e0e0      	LDI  R30,LOW(0)
00010f 940e 044a 	CALL SUBOPT_0x2
                 ; 0000 0045     lcd_puts(textbuff);                         //Meletakkan textbuff di LCD pada baris ke 1, kolom ke 0
                 ; 0000 0046     };
                 ; 0000 0047 }
000111 91e9      	LD   R30,Y+
000112 bfef      	OUT  SREG,R30
000113 91f9      	LD   R31,Y+
000114 91e9      	LD   R30,Y+
000115 91b9      	LD   R27,Y+
000116 91a9      	LD   R26,Y+
000117 9199      	LD   R25,Y+
000118 9189      	LD   R24,Y+
000119 9179      	LD   R23,Y+
00011a 9169      	LD   R22,Y+
00011b 90f9      	LD   R15,Y+
00011c 9019      	LD   R1,Y+
00011d 9009      	LD   R0,Y+
00011e 9518      	RETI
                 ; .FEND
                 ;
                 ;// Timer1 output compare A interrupt service routine
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 004B {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
00011f 93aa      	ST   -Y,R26
000120 93ea      	ST   -Y,R30
000121 93fa      	ST   -Y,R31
000122 b7ef      	IN   R30,SREG
000123 93ea      	ST   -Y,R30
                 ; 0000 004C   if (counter < 20) {                           //Menentukan apakah nilai counter telah melewati 20 atau belum
000124 e1e4      	LDI  R30,LOW(20)
000125 e0f0      	LDI  R31,HIGH(20)
000126 16ae      	CP   R10,R30
000127 06bf      	CPC  R11,R31
000128 f41c      	BRGE _0xC
                 ; 0000 004D     led = 1;                                    //Jika belum melewati 20, maka led = 1;
000129 e0e1      	LDI  R30,LOW(1)
00012a e0f0      	LDI  R31,HIGH(1)
00012b c006      	RJMP _0x1B
                 ; 0000 004E     }
                 ; 0000 004F else  {                                         //Jika telah melewati 20, maka led akan berkedip;
                 _0xC:
                 ; 0000 0050     led = PORTB.3 ^ 1;
00012c e0a0      	LDI  R26,0
00012d 99c3      	SBIC 0x18,3
00012e e0a1      	LDI  R26,1
00012f e0e1      	LDI  R30,LOW(1)
000130 27ea      	EOR  R30,R26
000131 e0f0      	LDI  R31,0
                 _0x1B:
000132 93e0 0502 	STS  _led,R30
000134 93f0 0503 	STS  _led+1,R31
                 ; 0000 0051     };
                 ; 0000 0052 PORTB.3 = led;                                  //Menyalakan/Mematikan PORTB bit 3 sesuai dengan led
000136 91e0 0502 	LDS  R30,_led
000138 30e0      	CPI  R30,0
000139 f411      	BRNE _0xE
00013a 98c3      	CBI  0x18,3
00013b c001      	RJMP _0xF
                 _0xE:
00013c 9ac3      	SBI  0x18,3
                 _0xF:
                 ; 0000 0053 }
00013d 91e9      	LD   R30,Y+
00013e bfef      	OUT  SREG,R30
00013f 91f9      	LD   R31,Y+
000140 91e9      	LD   R30,Y+
000141 91a9      	LD   R26,Y+
000142 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0056 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0057 // Declare your local variables here
                 ; 0000 0058 
                 ; 0000 0059 // Input/Output Ports initialization
                 ; 0000 005A // Port A initialization
                 ; 0000 005B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 005C DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000143 e0e0      	LDI  R30,LOW(0)
000144 bbea      	OUT  0x1A,R30
                 ; 0000 005D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 005E PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000145 bbeb      	OUT  0x1B,R30
                 ; 0000 005F 
                 ; 0000 0060 // Port B initialization
                 ; 0000 0061 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0062 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
000146 efef      	LDI  R30,LOW(255)
000147 bbe7      	OUT  0x17,R30
                 ; 0000 0063 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0064 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000148 e0e0      	LDI  R30,LOW(0)
000149 bbe8      	OUT  0x18,R30
                 ; 0000 0065 
                 ; 0000 0066 // Port C initialization
                 ; 0000 0067 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0068 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
00014a efef      	LDI  R30,LOW(255)
00014b bbe4      	OUT  0x14,R30
                 ; 0000 0069 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 006A PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00014c e0e0      	LDI  R30,LOW(0)
00014d bbe5      	OUT  0x15,R30
                 ; 0000 006B 
                 ; 0000 006C // Port D initialization
                 ; 0000 006D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 006E DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
00014e bbe1      	OUT  0x11,R30
                 ; 0000 006F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=P
                 ; 0000 0070 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (1<<PORTD0);
00014f e0e1      	LDI  R30,LOW(1)
000150 bbe2      	OUT  0x12,R30
                 ; 0000 0071 
                 ; 0000 0072 // Port E initialization
                 ; 0000 0073 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0074 DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
000151 e0e0      	LDI  R30,LOW(0)
000152 b9e2      	OUT  0x2,R30
                 ; 0000 0075 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0076 PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
000153 b9e3      	OUT  0x3,R30
                 ; 0000 0077 
                 ; 0000 0078 // Port F initialization
                 ; 0000 0079 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 007A DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
000154 93e0 0061 	STS  97,R30
                 ; 0000 007B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 007C PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
000156 93e0 0062 	STS  98,R30
                 ; 0000 007D 
                 ; 0000 007E // Port G initialization
                 ; 0000 007F // Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0080 DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
000158 93e0 0064 	STS  100,R30
                 ; 0000 0081 // State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0082 PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
00015a 93e0 0065 	STS  101,R30
                 ; 0000 0083 
                 ; 0000 0084 // Timer/Counter 0 initialization
                 ; 0000 0085 // Clock source: System Clock
                 ; 0000 0086 // Clock value: Timer 0 Stopped
                 ; 0000 0087 // Mode: Normal top=0xFF
                 ; 0000 0088 // OC0 output: Disconnected
                 ; 0000 0089 ASSR=0<<AS0;
00015c bfe0      	OUT  0x30,R30
                 ; 0000 008A TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
00015d bfe3      	OUT  0x33,R30
                 ; 0000 008B TCNT0=0x00;
00015e bfe2      	OUT  0x32,R30
                 ; 0000 008C OCR0=0x00;
00015f bfe1      	OUT  0x31,R30
                 ; 0000 008D 
                 ; 0000 008E // Timer/Counter 1 initialization
                 ; 0000 008F // Clock source: System Clock
                 ; 0000 0090 // Clock value: 39,063 kHz
                 ; 0000 0091 // Mode: CTC top=OCR1A
                 ; 0000 0092 // OC1A output: Disconnected
                 ; 0000 0093 // OC1B output: Disconnected
                 ; 0000 0094 // OC1C output: Disconnected
                 ; 0000 0095 // Noise Canceler: Off
                 ; 0000 0096 // Input Capture on Falling Edge
                 ; 0000 0097 // Timer Period: 0,49999 s
                 ; 0000 0098 // Timer1 Overflow Interrupt: Off
                 ; 0000 0099 // Input Capture Interrupt: Off
                 ; 0000 009A // Compare A Match Interrupt: On
                 ; 0000 009B // Compare B Match Interrupt: Off
                 ; 0000 009C // Compare C Match Interrupt: Off
                 ; 0000 009D TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
000160 bdef      	OUT  0x2F,R30
                 ; 0000 009E TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
000161 e0ec      	LDI  R30,LOW(12)
000162 bdee      	OUT  0x2E,R30
                 ; 0000 009F TCNT1H=0x00;
000163 e0e0      	LDI  R30,LOW(0)
000164 bded      	OUT  0x2D,R30
                 ; 0000 00A0 TCNT1L=0x00;
000165 bdec      	OUT  0x2C,R30
                 ; 0000 00A1 ICR1H=0x00;
000166 bde7      	OUT  0x27,R30
                 ; 0000 00A2 ICR1L=0x00;
000167 bde6      	OUT  0x26,R30
                 ; 0000 00A3 OCR1AH=0x4C;
000168 e4ec      	LDI  R30,LOW(76)
000169 bdeb      	OUT  0x2B,R30
                 ; 0000 00A4 OCR1AL=0x4A;
00016a e4ea      	LDI  R30,LOW(74)
00016b bdea      	OUT  0x2A,R30
                 ; 0000 00A5 OCR1BH=0x00;
00016c e0e0      	LDI  R30,LOW(0)
00016d bde9      	OUT  0x29,R30
                 ; 0000 00A6 OCR1BL=0x00;
00016e bde8      	OUT  0x28,R30
                 ; 0000 00A7 OCR1CH=0x00;
00016f 93e0 0079 	STS  121,R30
                 ; 0000 00A8 OCR1CL=0x00;
000171 93e0 0078 	STS  120,R30
                 ; 0000 00A9 
                 ; 0000 00AA // Timer/Counter 2 initialization
                 ; 0000 00AB // Clock source: System Clock
                 ; 0000 00AC // Clock value: Timer2 Stopped
                 ; 0000 00AD // Mode: Normal top=0xFF
                 ; 0000 00AE // OC2 output: Disconnected
                 ; 0000 00AF TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000173 bde5      	OUT  0x25,R30
                 ; 0000 00B0 TCNT2=0x00;
000174 bde4      	OUT  0x24,R30
                 ; 0000 00B1 OCR2=0x00;
000175 bde3      	OUT  0x23,R30
                 ; 0000 00B2 
                 ; 0000 00B3 // Timer/Counter 3 initialization
                 ; 0000 00B4 // Clock source: System Clock
                 ; 0000 00B5 // Clock value: Timer3 Stopped
                 ; 0000 00B6 // Mode: Normal top=0xFFFF
                 ; 0000 00B7 // OC3A output: Disconnected
                 ; 0000 00B8 // OC3B output: Disconnected
                 ; 0000 00B9 // OC3C output: Disconnected
                 ; 0000 00BA // Noise Canceler: Off
                 ; 0000 00BB // Input Capture on Falling Edge
                 ; 0000 00BC // Timer3 Overflow Interrupt: Off
                 ; 0000 00BD // Input Capture Interrupt: Off
                 ; 0000 00BE // Compare A Match Interrupt: Off
                 ; 0000 00BF // Compare B Match Interrupt: Off
                 ; 0000 00C0 // Compare C Match Interrupt: Off
                 ; 0000 00C1 TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
000176 93e0 008b 	STS  139,R30
                 ; 0000 00C2 TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
000178 93e0 008a 	STS  138,R30
                 ; 0000 00C3 TCNT3H=0x00;
00017a 93e0 0089 	STS  137,R30
                 ; 0000 00C4 TCNT3L=0x00;
00017c 93e0 0088 	STS  136,R30
                 ; 0000 00C5 ICR3H=0x00;
00017e 93e0 0081 	STS  129,R30
                 ; 0000 00C6 ICR3L=0x00;
000180 93e0 0080 	STS  128,R30
                 ; 0000 00C7 OCR3AH=0x00;
000182 93e0 0087 	STS  135,R30
                 ; 0000 00C8 OCR3AL=0x00;
000184 93e0 0086 	STS  134,R30
                 ; 0000 00C9 OCR3BH=0x00;
000186 93e0 0085 	STS  133,R30
                 ; 0000 00CA OCR3BL=0x00;
000188 93e0 0084 	STS  132,R30
                 ; 0000 00CB OCR3CH=0x00;
00018a 93e0 0083 	STS  131,R30
                 ; 0000 00CC OCR3CL=0x00;
00018c 93e0 0082 	STS  130,R30
                 ; 0000 00CD 
                 ; 0000 00CE // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00CF TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
00018e e1e0      	LDI  R30,LOW(16)
00018f bfe7      	OUT  0x37,R30
                 ; 0000 00D0 ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
000190 e0e0      	LDI  R30,LOW(0)
000191 93e0 007d 	STS  125,R30
                 ; 0000 00D1 
                 ; 0000 00D2 // External Interrupt(s) initialization
                 ; 0000 00D3 // INT0: On
                 ; 0000 00D4 // INT0 Mode: Falling Edge
                 ; 0000 00D5 // INT1: Off
                 ; 0000 00D6 // INT2: Off
                 ; 0000 00D7 // INT3: Off
                 ; 0000 00D8 // INT4: Off
                 ; 0000 00D9 // INT5: Off
                 ; 0000 00DA // INT6: Off
                 ; 0000 00DB // INT7: Off
                 ; 0000 00DC EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
000193 e0e2      	LDI  R30,LOW(2)
000194 93e0 006a 	STS  106,R30
                 ; 0000 00DD EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
000196 e0e0      	LDI  R30,LOW(0)
000197 bfea      	OUT  0x3A,R30
                 ; 0000 00DE EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (1<<INT0);
000198 e0e1      	LDI  R30,LOW(1)
000199 bfe9      	OUT  0x39,R30
                 ; 0000 00DF EIFR=(0<<INTF7) | (0<<INTF6) | (0<<INTF5) | (0<<INTF4) | (0<<INTF3) | (0<<INTF2) | (0<<INTF1) | (1<<INTF0);
00019a bfe8      	OUT  0x38,R30
                 ; 0000 00E0 
                 ; 0000 00E1 // USART0 initialization
                 ; 0000 00E2 // USART0 disabled
                 ; 0000 00E3 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
00019b e0e0      	LDI  R30,LOW(0)
00019c b9ea      	OUT  0xA,R30
                 ; 0000 00E4 
                 ; 0000 00E5 // USART1 initialization
                 ; 0000 00E6 // USART1 disabled
                 ; 0000 00E7 UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
00019d 93e0 009a 	STS  154,R30
                 ; 0000 00E8 
                 ; 0000 00E9 // Analog Comparator initialization
                 ; 0000 00EA // Analog Comparator: Off
                 ; 0000 00EB // The Analog Comparator's positive input is
                 ; 0000 00EC // connected to the AIN0 pin
                 ; 0000 00ED // The Analog Comparator's negative input is
                 ; 0000 00EE // connected to the AIN1 pin
                 ; 0000 00EF ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00019f e8e0      	LDI  R30,LOW(128)
0001a0 b9e8      	OUT  0x8,R30
                 ; 0000 00F0 SFIOR=(0<<ACME);
0001a1 e0e0      	LDI  R30,LOW(0)
0001a2 bde0      	OUT  0x20,R30
                 ; 0000 00F1 
                 ; 0000 00F2 // ADC initialization
                 ; 0000 00F3 // ADC disabled
                 ; 0000 00F4 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0001a3 b9e6      	OUT  0x6,R30
                 ; 0000 00F5 
                 ; 0000 00F6 // SPI initialization
                 ; 0000 00F7 // SPI disabled
                 ; 0000 00F8 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0001a4 b9ed      	OUT  0xD,R30
                 ; 0000 00F9 
                 ; 0000 00FA // TWI initialization
                 ; 0000 00FB // TWI disabled
                 ; 0000 00FC TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0001a5 93e0 0074 	STS  116,R30
                 ; 0000 00FD 
                 ; 0000 00FE // Alphanumeric LCD initialization
                 ; 0000 00FF // Connections are specified in the
                 ; 0000 0100 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0101 // RS - PORTC Bit 0
                 ; 0000 0102 // RD - PORTC Bit 2
                 ; 0000 0103 // EN - PORTC Bit 1
                 ; 0000 0104 // D4 - PORTC Bit 4
                 ; 0000 0105 // D5 - PORTC Bit 5
                 ; 0000 0106 // D6 - PORTC Bit 6
                 ; 0000 0107 // D7 - PORTC Bit 7
                 ; 0000 0108 // Characters/line: 16
                 ; 0000 0109 lcd_init(16); //Mengatur Characters per baris pada LCD sebanyak 16
0001a7 e1a0      	LDI  R26,LOW(16)
0001a8 d0a0      	RCALL _lcd_init
                 ; 0000 010A 
                 ; 0000 010B // Global enable interrupts
                 ; 0000 010C #asm("sei")   //Mengaktifkan Interrupt Global
0001a9 9478      	sei
                 ; 0000 010D 
                 ; 0000 010E sprintf(textbuff,"Counter=   ",counter1);   // Tampilkan display "Counter = "
0001aa 940e 0439 	CALL SUBOPT_0x0
                +
0001ac ece4     +LDI R30 , LOW ( 2 * _0x0 + ( 24 ) )
0001ad e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 24 ) )
                 	__POINTW1FN _0x0,24
0001ae 940e 043e 	CALL SUBOPT_0x1
                 ; 0000 010F 
                 ; 0000 0110 while (1)
                 _0x10:
                 ; 0000 0111   {
                 ; 0000 0112   // Place your code here
                 ; 0000 0113   for(i=0;i<=6;i++){                        //Looping untuk membuat nama bergeser ke kanan
0001b0 2444      	CLR  R4
0001b1 2455      	CLR  R5
                 _0x14:
0001b2 e0e6      	LDI  R30,LOW(6)
0001b3 e0f0      	LDI  R31,HIGH(6)
0001b4 15e4      	CP   R30,R4
0001b5 05f5      	CPC  R31,R5
0001b6 f064      	BRLT _0x15
                 ; 0000 0114     lcd_clear();                            //Membersihkan tampilan LCD
0001b7 d052      	RCALL _lcd_clear
                 ; 0000 0115     lcd_gotoxy(i,0);
0001b8 924a      	ST   -Y,R4
0001b9 940e 0452 	CALL SUBOPT_0x3
                 ; 0000 0116     lcd_puts(nama);                         //Meletakkan nama di LCD pada baris ke 0, kolom ke i
                 ; 0000 0117     lcd_gotoxy(0,1);
                 ; 0000 0118     lcd_puts(textbuff);                     //Meletakkan buff di LCD pada baris ke 1, kolom ke 0
                 ; 0000 0119     delay_ms(100);                          //Nama akan bergeser dengan delay 0,1s
0001bb e6a4      	LDI  R26,LOW(100)
0001bc e0b0      	LDI  R27,0
0001bd 940e 0495 	CALL _delay_ms
                 ; 0000 011A     }
0001bf 01f2      	MOVW R30,R4
0001c0 9631      	ADIW R30,1
0001c1 012f      	MOVW R4,R30
0001c2 cfef      	RJMP _0x14
                 _0x15:
                 ; 0000 011B     for(j=5;j>=1;j--){                      //Looping untuk membuat nama bergeser ke kiri
0001c3 e0e5      	LDI  R30,LOW(5)
0001c4 e0f0      	LDI  R31,HIGH(5)
0001c5 013f      	MOVW R6,R30
                 _0x17:
0001c6 e0e1      	LDI  R30,LOW(1)
0001c7 e0f0      	LDI  R31,HIGH(1)
0001c8 166e      	CP   R6,R30
0001c9 067f      	CPC  R7,R31
0001ca f064      	BRLT _0x18
                 ; 0000 011C       lcd_clear();                          //Membersihkan tampilan LCD
0001cb d03e      	RCALL _lcd_clear
                 ; 0000 011D       lcd_gotoxy(j,0);
0001cc 926a      	ST   -Y,R6
0001cd 940e 0452 	CALL SUBOPT_0x3
                 ; 0000 011E       lcd_puts(nama);                       //Meletakkan nama di LCD pada baris ke 0, kolom ke i
                 ; 0000 011F       lcd_gotoxy(0,1);
                 ; 0000 0120       lcd_puts(textbuff);                   //Meletakkan buff di LCD pada baris ke 1, kolom ke 0
                 ; 0000 0121       delay_ms(100);                        //Nama akan bergeser dengan delay 0,1s
0001cf e6a4      	LDI  R26,LOW(100)
0001d0 e0b0      	LDI  R27,0
0001d1 940e 0495 	CALL _delay_ms
                 ; 0000 0122     }
0001d3 01f3      	MOVW R30,R6
0001d4 9731      	SBIW R30,1
0001d5 013f      	MOVW R6,R30
0001d6 cfef      	RJMP _0x17
                 _0x18:
                 ; 0000 0123   }
0001d7 cfd8      	RJMP _0x10
                 ; 0000 0124 }
                 _0x19:
0001d8 cfff      	RJMP _0x19
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0001d9 93aa      	ST   -Y,R26
0001da b3e5      	IN   R30,0x15
0001db 70ef      	ANDI R30,LOW(0xF)
0001dc 2fae      	MOV  R26,R30
0001dd 81e8      	LD   R30,Y
0001de 7fe0      	ANDI R30,LOW(0xF0)
0001df 2bea      	OR   R30,R26
0001e0 bbe5      	OUT  0x15,R30
                +
0001e1 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0001e2 958a     +DEC R24
0001e3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0001e4 9aa9      	SBI  0x15,1
                +
0001e5 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0001e6 958a     +DEC R24
0001e7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0001e8 98a9      	CBI  0x15,1
                +
0001e9 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0001ea 958a     +DEC R24
0001eb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0001ec c089      	RJMP _0x20C0002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001ed 93aa      	ST   -Y,R26
0001ee 81a8      	LD   R26,Y
0001ef dfe9      	RCALL __lcd_write_nibble_G100
0001f0 81e8          ld    r30,y
0001f1 95e2          swap  r30
0001f2 83e8          st    y,r30
0001f3 81a8      	LD   R26,Y
0001f4 dfe4      	RCALL __lcd_write_nibble_G100
                +
0001f5 ea87     +LDI R24 , LOW ( 167 )
                +__DELAY_USB_LOOP :
0001f6 958a     +DEC R24
0001f7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 167
0001f8 c07d      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001f9 93aa      	ST   -Y,R26
0001fa 81e8      	LD   R30,Y
0001fb e0f0      	LDI  R31,0
0001fc 5dec      	SUBI R30,LOW(-__base_y_G100)
0001fd 4ffa      	SBCI R31,HIGH(-__base_y_G100)
0001fe 81e0      	LD   R30,Z
0001ff 81a9      	LDD  R26,Y+1
000200 0fae      	ADD  R26,R30
000201 dfeb      	RCALL __lcd_write_data
000202 81e9      	LDD  R30,Y+1
000203 93e0 0528 	STS  __lcd_x,R30
000205 81e8      	LD   R30,Y
000206 93e0 0529 	STS  __lcd_y,R30
000208 9622      	ADIW R28,2
000209 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00020a e0a2      	LDI  R26,LOW(2)
00020b 940e 045b 	CALL SUBOPT_0x4
00020d e0ac      	LDI  R26,LOW(12)
00020e dfde      	RCALL __lcd_write_data
00020f e0a1      	LDI  R26,LOW(1)
000210 940e 045b 	CALL SUBOPT_0x4
000212 e0e0      	LDI  R30,LOW(0)
000213 93e0 0529 	STS  __lcd_y,R30
000215 93e0 0528 	STS  __lcd_x,R30
000217 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000218 93aa      	ST   -Y,R26
000219 81a8      	LD   R26,Y
00021a 30aa      	CPI  R26,LOW(0xA)
00021b f031      	BREQ _0x2000005
00021c 91e0 052a 	LDS  R30,__lcd_maxx
00021e 91a0 0528 	LDS  R26,__lcd_x
000220 17ae      	CP   R26,R30
000221 f060      	BRLO _0x2000004
                 _0x2000005:
000222 e0e0      	LDI  R30,LOW(0)
000223 93ea      	ST   -Y,R30
000224 91a0 0529 	LDS  R26,__lcd_y
000226 5faf      	SUBI R26,-LOW(1)
000227 93a0 0529 	STS  __lcd_y,R26
000229 dfcf      	RCALL _lcd_gotoxy
00022a 81a8      	LD   R26,Y
00022b 30aa      	CPI  R26,LOW(0xA)
00022c f409      	BRNE _0x2000007
00022d c048      	RJMP _0x20C0002
                 _0x2000007:
                 _0x2000004:
00022e 91e0 0528 	LDS  R30,__lcd_x
000230 5fef      	SUBI R30,-LOW(1)
000231 93e0 0528 	STS  __lcd_x,R30
000233 9aa8      	SBI  0x15,0
000234 81a8      	LD   R26,Y
000235 dfb7      	RCALL __lcd_write_data
000236 98a8      	CBI  0x15,0
000237 c03e      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000238 93ba      	ST   -Y,R27
000239 93aa      	ST   -Y,R26
00023a 931a      	ST   -Y,R17
                 _0x2000008:
00023b 81a9      	LDD  R26,Y+1
00023c 81ba      	LDD  R27,Y+1+1
00023d 91ed      	LD   R30,X+
00023e 83a9      	STD  Y+1,R26
00023f 83ba      	STD  Y+1+1,R27
000240 2f1e      	MOV  R17,R30
000241 30e0      	CPI  R30,0
000242 f019      	BREQ _0x200000A
000243 2fa1      	MOV  R26,R17
000244 dfd3      	RCALL _lcd_putchar
000245 cff5      	RJMP _0x2000008
                 _0x200000A:
000246 8118      	LDD  R17,Y+0
000247 9623      	ADIW R28,3
000248 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000249 93aa      	ST   -Y,R26
00024a b3e4      	IN   R30,0x14
00024b 6fe0      	ORI  R30,LOW(0xF0)
00024c bbe4      	OUT  0x14,R30
00024d 9aa1      	SBI  0x14,1
00024e 9aa0      	SBI  0x14,0
00024f 9aa2      	SBI  0x14,2
000250 98a9      	CBI  0x15,1
000251 98a8      	CBI  0x15,0
000252 98aa      	CBI  0x15,2
000253 81e8      	LD   R30,Y
000254 93e0 052a 	STS  __lcd_maxx,R30
000256 58e0      	SUBI R30,-LOW(128)
                +
000257 93e0 0526+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000259 81e8      	LD   R30,Y
00025a 54e0      	SUBI R30,-LOW(192)
                +
00025b 93e0 0527+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00025d e1a4      	LDI  R26,LOW(20)
00025e e0b0      	LDI  R27,0
00025f 940e 0495 	CALL _delay_ms
000261 940e 0461 	CALL SUBOPT_0x5
000263 940e 0461 	CALL SUBOPT_0x5
000265 940e 0461 	CALL SUBOPT_0x5
000267 e2a0      	LDI  R26,LOW(32)
000268 df70      	RCALL __lcd_write_nibble_G100
                +
000269 ef8a     +LDI R24 , LOW ( 250 )
00026a e090     +LDI R25 , HIGH ( 250 )
                +__DELAY_USW_LOOP :
00026b 9701     +SBIW R24 , 1
00026c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 250
00026d e2a8      	LDI  R26,LOW(40)
00026e df7e      	RCALL __lcd_write_data
00026f e0a4      	LDI  R26,LOW(4)
000270 df7c      	RCALL __lcd_write_data
000271 e8a5      	LDI  R26,LOW(133)
000272 df7a      	RCALL __lcd_write_data
000273 e0a6      	LDI  R26,LOW(6)
000274 df78      	RCALL __lcd_write_data
000275 df94      	RCALL _lcd_clear
                 _0x20C0002:
000276 9621      	ADIW R28,1
000277 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000278 93ba      	ST   -Y,R27
000279 93aa      	ST   -Y,R26
00027a 931a      	ST   -Y,R17
00027b 930a      	ST   -Y,R16
00027c 81aa      	LDD  R26,Y+2
00027d 81bb      	LDD  R27,Y+2+1
00027e 9612      	ADIW R26,2
00027f 940e 0628 	CALL __GETW1P
000281 9730      	SBIW R30,0
000282 f159      	BREQ _0x2020010
000283 81aa      	LDD  R26,Y+2
000284 81bb      	LDD  R27,Y+2+1
000285 9614      	ADIW R26,4
000286 940e 0628 	CALL __GETW1P
000288 018f      	MOVW R16,R30
000289 9730      	SBIW R30,0
00028a f061      	BREQ _0x2020012
                +
00028b 3002     +CPI R16 , LOW ( 2 )
00028c e0e0     +LDI R30 , HIGH ( 2 )
00028d 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00028e f098      	BRLO _0x2020013
00028f 01f8      	MOVW R30,R16
000290 9731      	SBIW R30,1
000291 018f      	MOVW R16,R30
                +
000292 81aa     +LDD R26 , Y + 2
000293 81bb     +LDD R27 , Y + 2 + 1
000294 9614     +ADIW R26 , 4
000295 93ed     +ST X + , R30
000296 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000297 81aa      	LDD  R26,Y+2
000298 81bb      	LDD  R27,Y+2+1
000299 9612      	ADIW R26,2
00029a 91ed      	LD   R30,X+
00029b 91fd      	LD   R31,X+
00029c 9631      	ADIW R30,1
00029d 93fe      	ST   -X,R31
00029e 93ee      	ST   -X,R30
00029f 9731      	SBIW R30,1
0002a0 81ac      	LDD  R26,Y+4
0002a1 83a0      	STD  Z+0,R26
                 _0x2020013:
0002a2 81aa      	LDD  R26,Y+2
0002a3 81bb      	LDD  R27,Y+2+1
0002a4 940e 0628 	CALL __GETW1P
0002a6 23ff      	TST  R31
0002a7 f02a      	BRMI _0x2020014
0002a8 91ed      	LD   R30,X+
0002a9 91fd      	LD   R31,X+
0002aa 9631      	ADIW R30,1
0002ab 93fe      	ST   -X,R31
0002ac 93ee      	ST   -X,R30
                 _0x2020014:
0002ad c006      	RJMP _0x2020015
                 _0x2020010:
0002ae 81aa      	LDD  R26,Y+2
0002af 81bb      	LDD  R27,Y+2+1
0002b0 efef      	LDI  R30,LOW(65535)
0002b1 efff      	LDI  R31,HIGH(65535)
0002b2 93ed      	ST   X+,R30
0002b3 93fc      	ST   X,R31
                 _0x2020015:
0002b4 8119      	LDD  R17,Y+1
0002b5 8108      	LDD  R16,Y+0
0002b6 9625      	ADIW R28,5
0002b7 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0002b8 93ba      	ST   -Y,R27
0002b9 93aa      	ST   -Y,R26
0002ba 9726      	SBIW R28,6
0002bb 940e 064c 	CALL __SAVELOCR6
0002bd e010      	LDI  R17,0
0002be 85ac      	LDD  R26,Y+12
0002bf 85bd      	LDD  R27,Y+12+1
0002c0 e0e0      	LDI  R30,LOW(0)
0002c1 e0f0      	LDI  R31,HIGH(0)
0002c2 93ed      	ST   X+,R30
0002c3 93fc      	ST   X,R31
                 _0x2020016:
0002c4 89ea      	LDD  R30,Y+18
0002c5 89fb      	LDD  R31,Y+18+1
0002c6 9631      	ADIW R30,1
0002c7 8bea      	STD  Y+18,R30
0002c8 8bfb      	STD  Y+18+1,R31
0002c9 9731      	SBIW R30,1
0002ca 91e4      	LPM  R30,Z
0002cb 2f2e      	MOV  R18,R30
0002cc 30e0      	CPI  R30,0
0002cd f409      	BRNE PC+2
0002ce c115      	RJMP _0x2020018
0002cf 2fe1      	MOV  R30,R17
0002d0 30e0      	CPI  R30,0
0002d1 f439      	BRNE _0x202001C
0002d2 3225      	CPI  R18,37
0002d3 f411      	BRNE _0x202001D
0002d4 e011      	LDI  R17,LOW(1)
0002d5 c002      	RJMP _0x202001E
                 _0x202001D:
0002d6 940e 0469 	CALL SUBOPT_0x6
                 _0x202001E:
0002d8 c10a      	RJMP _0x202001B
                 _0x202001C:
0002d9 30e1      	CPI  R30,LOW(0x1)
0002da f4a9      	BRNE _0x202001F
0002db 3225      	CPI  R18,37
0002dc f419      	BRNE _0x2020020
0002dd 940e 0469 	CALL SUBOPT_0x6
0002df c102      	RJMP _0x20200CC
                 _0x2020020:
0002e0 e012      	LDI  R17,LOW(2)
0002e1 e040      	LDI  R20,LOW(0)
0002e2 e000      	LDI  R16,LOW(0)
0002e3 322d      	CPI  R18,45
0002e4 f411      	BRNE _0x2020021
0002e5 e001      	LDI  R16,LOW(1)
0002e6 c0fc      	RJMP _0x202001B
                 _0x2020021:
0002e7 322b      	CPI  R18,43
0002e8 f411      	BRNE _0x2020022
0002e9 e24b      	LDI  R20,LOW(43)
0002ea c0f8      	RJMP _0x202001B
                 _0x2020022:
0002eb 3220      	CPI  R18,32
0002ec f411      	BRNE _0x2020023
0002ed e240      	LDI  R20,LOW(32)
0002ee c0f4      	RJMP _0x202001B
                 _0x2020023:
0002ef c002      	RJMP _0x2020024
                 _0x202001F:
0002f0 30e2      	CPI  R30,LOW(0x2)
0002f1 f439      	BRNE _0x2020025
                 _0x2020024:
0002f2 e050      	LDI  R21,LOW(0)
0002f3 e013      	LDI  R17,LOW(3)
0002f4 3320      	CPI  R18,48
0002f5 f411      	BRNE _0x2020026
0002f6 6800      	ORI  R16,LOW(128)
0002f7 c0eb      	RJMP _0x202001B
                 _0x2020026:
0002f8 c003      	RJMP _0x2020027
                 _0x2020025:
0002f9 30e3      	CPI  R30,LOW(0x3)
0002fa f009      	BREQ PC+2
0002fb c0e7      	RJMP _0x202001B
                 _0x2020027:
0002fc 3320      	CPI  R18,48
0002fd f010      	BRLO _0x202002A
0002fe 332a      	CPI  R18,58
0002ff f008      	BRLO _0x202002B
                 _0x202002A:
000300 c007      	RJMP _0x2020029
                 _0x202002B:
000301 e0aa      	LDI  R26,LOW(10)
000302 9f5a      	MUL  R21,R26
000303 2d50      	MOV  R21,R0
000304 2fe2      	MOV  R30,R18
000305 53e0      	SUBI R30,LOW(48)
000306 0f5e      	ADD  R21,R30
000307 c0db      	RJMP _0x202001B
                 _0x2020029:
000308 2fe2      	MOV  R30,R18
000309 36e3      	CPI  R30,LOW(0x63)
00030a f449      	BRNE _0x202002F
00030b 940e 0470 	CALL SUBOPT_0x7
00030d 89e8      	LDD  R30,Y+16
00030e 89f9      	LDD  R31,Y+16+1
00030f 81a4      	LDD  R26,Z+4
000310 93aa      	ST   -Y,R26
000311 940e 0476 	CALL SUBOPT_0x8
000313 c0ce      	RJMP _0x2020030
                 _0x202002F:
000314 37e3      	CPI  R30,LOW(0x73)
000315 f441      	BRNE _0x2020032
000316 940e 0470 	CALL SUBOPT_0x7
000318 940e 047c 	CALL SUBOPT_0x9
00031a 940e 0420 	CALL _strlen
00031c 2f1e      	MOV  R17,R30
00031d c00a      	RJMP _0x2020033
                 _0x2020032:
00031e 37e0      	CPI  R30,LOW(0x70)
00031f f461      	BRNE _0x2020035
000320 940e 0470 	CALL SUBOPT_0x7
000322 940e 047c 	CALL SUBOPT_0x9
000324 940e 042c 	CALL _strlenf
000326 2f1e      	MOV  R17,R30
000327 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000328 6002      	ORI  R16,LOW(2)
000329 770f      	ANDI R16,LOW(127)
00032a e030      	LDI  R19,LOW(0)
00032b c034      	RJMP _0x2020036
                 _0x2020035:
00032c 36e4      	CPI  R30,LOW(0x64)
00032d f011      	BREQ _0x2020039
00032e 36e9      	CPI  R30,LOW(0x69)
00032f f411      	BRNE _0x202003A
                 _0x2020039:
000330 6004      	ORI  R16,LOW(4)
000331 c002      	RJMP _0x202003B
                 _0x202003A:
000332 37e5      	CPI  R30,LOW(0x75)
000333 f431      	BRNE _0x202003C
                 _0x202003B:
000334 e8ec      	LDI  R30,LOW(_tbl10_G101*2)
000335 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000336 83ee      	STD  Y+6,R30
000337 83ff      	STD  Y+6+1,R31
000338 e015      	LDI  R17,LOW(5)
000339 c00c      	RJMP _0x202003D
                 _0x202003C:
00033a 35e8      	CPI  R30,LOW(0x58)
00033b f411      	BRNE _0x202003F
00033c 6008      	ORI  R16,LOW(8)
00033d c003      	RJMP _0x2020040
                 _0x202003F:
00033e 37e8      	CPI  R30,LOW(0x78)
00033f f009      	BREQ PC+2
000340 c0a1      	RJMP _0x2020071
                 _0x2020040:
000341 e9e6      	LDI  R30,LOW(_tbl16_G101*2)
000342 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000343 83ee      	STD  Y+6,R30
000344 83ff      	STD  Y+6+1,R31
000345 e014      	LDI  R17,LOW(4)
                 _0x202003D:
000346 ff02      	SBRS R16,2
000347 c014      	RJMP _0x2020042
000348 940e 0470 	CALL SUBOPT_0x7
00034a 940e 0486 	CALL SUBOPT_0xA
00034c 85ab      	LDD  R26,Y+11
00034d 23aa      	TST  R26
00034e f43a      	BRPL _0x2020043
00034f 85ea      	LDD  R30,Y+10
000350 85fb      	LDD  R31,Y+10+1
000351 940e 05f1 	CALL __ANEGW1
000353 87ea      	STD  Y+10,R30
000354 87fb      	STD  Y+10+1,R31
000355 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000356 3040      	CPI  R20,0
000357 f011      	BREQ _0x2020044
000358 5f1f      	SUBI R17,-LOW(1)
000359 c001      	RJMP _0x2020045
                 _0x2020044:
00035a 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
00035b c004      	RJMP _0x2020046
                 _0x2020042:
00035c 940e 0470 	CALL SUBOPT_0x7
00035e 940e 0486 	CALL SUBOPT_0xA
                 _0x2020046:
                 _0x2020036:
000360 fd00      	SBRC R16,0
000361 c011      	RJMP _0x2020047
                 _0x2020048:
000362 1715      	CP   R17,R21
000363 f478      	BRSH _0x202004A
000364 ff07      	SBRS R16,7
000365 c008      	RJMP _0x202004B
000366 ff02      	SBRS R16,2
000367 c004      	RJMP _0x202004C
000368 7f0b      	ANDI R16,LOW(251)
000369 2f24      	MOV  R18,R20
00036a 5011      	SUBI R17,LOW(1)
00036b c001      	RJMP _0x202004D
                 _0x202004C:
00036c e320      	LDI  R18,LOW(48)
                 _0x202004D:
00036d c001      	RJMP _0x202004E
                 _0x202004B:
00036e e220      	LDI  R18,LOW(32)
                 _0x202004E:
00036f 940e 0469 	CALL SUBOPT_0x6
000371 5051      	SUBI R21,LOW(1)
000372 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000373 2f31      	MOV  R19,R17
000374 ff01      	SBRS R16,1
000375 c017      	RJMP _0x202004F
                 _0x2020050:
000376 3030      	CPI  R19,0
000377 f0a1      	BREQ _0x2020052
000378 ff03      	SBRS R16,3
000379 c006      	RJMP _0x2020053
00037a 81ee      	LDD  R30,Y+6
00037b 81ff      	LDD  R31,Y+6+1
00037c 9125      	LPM  R18,Z+
00037d 83ee      	STD  Y+6,R30
00037e 83ff      	STD  Y+6+1,R31
00037f c005      	RJMP _0x2020054
                 _0x2020053:
000380 81ae      	LDD  R26,Y+6
000381 81bf      	LDD  R27,Y+6+1
000382 912d      	LD   R18,X+
000383 83ae      	STD  Y+6,R26
000384 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000385 940e 0469 	CALL SUBOPT_0x6
000387 3050      	CPI  R21,0
000388 f009      	BREQ _0x2020055
000389 5051      	SUBI R21,LOW(1)
                 _0x2020055:
00038a 5031      	SUBI R19,LOW(1)
00038b cfea      	RJMP _0x2020050
                 _0x2020052:
00038c c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
00038d e320      	LDI  R18,LOW(48)
00038e 81ee      	LDD  R30,Y+6
00038f 81ff      	LDD  R31,Y+6+1
000390 940e 062c 	CALL __GETW1PF
000392 87e8      	STD  Y+8,R30
000393 87f9      	STD  Y+8+1,R31
000394 81ee      	LDD  R30,Y+6
000395 81ff      	LDD  R31,Y+6+1
000396 9632      	ADIW R30,2
000397 83ee      	STD  Y+6,R30
000398 83ff      	STD  Y+6+1,R31
                 _0x202005A:
000399 85e8      	LDD  R30,Y+8
00039a 85f9      	LDD  R31,Y+8+1
00039b 85aa      	LDD  R26,Y+10
00039c 85bb      	LDD  R27,Y+10+1
00039d 17ae      	CP   R26,R30
00039e 07bf      	CPC  R27,R31
00039f f050      	BRLO _0x202005C
0003a0 5f2f      	SUBI R18,-LOW(1)
0003a1 85a8      	LDD  R26,Y+8
0003a2 85b9      	LDD  R27,Y+8+1
0003a3 85ea      	LDD  R30,Y+10
0003a4 85fb      	LDD  R31,Y+10+1
0003a5 1bea      	SUB  R30,R26
0003a6 0bfb      	SBC  R31,R27
0003a7 87ea      	STD  Y+10,R30
0003a8 87fb      	STD  Y+10+1,R31
0003a9 cfef      	RJMP _0x202005A
                 _0x202005C:
0003aa 332a      	CPI  R18,58
0003ab f028      	BRLO _0x202005D
0003ac ff03      	SBRS R16,3
0003ad c002      	RJMP _0x202005E
0003ae 5f29      	SUBI R18,-LOW(7)
0003af c001      	RJMP _0x202005F
                 _0x202005E:
0003b0 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0003b1 fd04      	SBRC R16,4
0003b2 c01a      	RJMP _0x2020061
0003b3 3321      	CPI  R18,49
0003b4 f420      	BRSH _0x2020063
0003b5 85a8      	LDD  R26,Y+8
0003b6 85b9      	LDD  R27,Y+8+1
0003b7 9711      	SBIW R26,1
0003b8 f409      	BRNE _0x2020062
                 _0x2020063:
0003b9 c009      	RJMP _0x20200CD
                 _0x2020062:
0003ba 1753      	CP   R21,R19
0003bb f010      	BRLO _0x2020067
0003bc ff00      	SBRS R16,0
0003bd c001      	RJMP _0x2020068
                 _0x2020067:
0003be c013      	RJMP _0x2020066
                 _0x2020068:
0003bf e220      	LDI  R18,LOW(32)
0003c0 ff07      	SBRS R16,7
0003c1 c00b      	RJMP _0x2020069
0003c2 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0003c3 6100      	ORI  R16,LOW(16)
0003c4 ff02      	SBRS R16,2
0003c5 c007      	RJMP _0x202006A
0003c6 7f0b      	ANDI R16,LOW(251)
0003c7 934a      	ST   -Y,R20
0003c8 940e 0476 	CALL SUBOPT_0x8
0003ca 3050      	CPI  R21,0
0003cb f009      	BREQ _0x202006B
0003cc 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0003cd 940e 0469 	CALL SUBOPT_0x6
0003cf 3050      	CPI  R21,0
0003d0 f009      	BREQ _0x202006C
0003d1 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0003d2 5031      	SUBI R19,LOW(1)
0003d3 85a8      	LDD  R26,Y+8
0003d4 85b9      	LDD  R27,Y+8+1
0003d5 9712      	SBIW R26,2
0003d6 f008      	BRLO _0x2020059
0003d7 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0003d8 ff00      	SBRS R16,0
0003d9 c008      	RJMP _0x202006D
                 _0x202006E:
0003da 3050      	CPI  R21,0
0003db f031      	BREQ _0x2020070
0003dc 5051      	SUBI R21,LOW(1)
0003dd e2e0      	LDI  R30,LOW(32)
0003de 93ea      	ST   -Y,R30
0003df 940e 0476 	CALL SUBOPT_0x8
0003e1 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0003e2 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0003e3 cee0      	RJMP _0x2020016
                 _0x2020018:
0003e4 85ac      	LDD  R26,Y+12
0003e5 85bd      	LDD  R27,Y+12+1
0003e6 940e 0628 	CALL __GETW1P
0003e8 940e 0653 	CALL __LOADLOCR6
0003ea 9664      	ADIW R28,20
0003eb 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0003ec 92ff      	PUSH R15
0003ed 2ef8      	MOV  R15,R24
0003ee 9726      	SBIW R28,6
0003ef 940e 064e 	CALL __SAVELOCR4
0003f1 940e 048e 	CALL SUBOPT_0xB
0003f3 9730      	SBIW R30,0
0003f4 f419      	BRNE _0x2020072
0003f5 efef      	LDI  R30,LOW(65535)
0003f6 efff      	LDI  R31,HIGH(65535)
0003f7 c023      	RJMP _0x20C0001
                 _0x2020072:
0003f8 01de      	MOVW R26,R28
0003f9 9616      	ADIW R26,6
0003fa 940e 05ed 	CALL __ADDW2R15
0003fc 018d      	MOVW R16,R26
0003fd 940e 048e 	CALL SUBOPT_0xB
0003ff 83ee      	STD  Y+6,R30
000400 83ff      	STD  Y+6+1,R31
000401 e0e0      	LDI  R30,LOW(0)
000402 87e8      	STD  Y+8,R30
000403 87e9      	STD  Y+8+1,R30
000404 01de      	MOVW R26,R28
000405 961a      	ADIW R26,10
000406 940e 05ed 	CALL __ADDW2R15
000408 940e 0628 	CALL __GETW1P
00040a 93fa      	ST   -Y,R31
00040b 93ea      	ST   -Y,R30
00040c 931a      	ST   -Y,R17
00040d 930a      	ST   -Y,R16
00040e e7e8      	LDI  R30,LOW(_put_buff_G101)
00040f e0f2      	LDI  R31,HIGH(_put_buff_G101)
000410 93fa      	ST   -Y,R31
000411 93ea      	ST   -Y,R30
000412 01de      	MOVW R26,R28
000413 961a      	ADIW R26,10
000414 dea3      	RCALL __print_G101
000415 019f      	MOVW R18,R30
000416 81ae      	LDD  R26,Y+6
000417 81bf      	LDD  R27,Y+6+1
000418 e0e0      	LDI  R30,LOW(0)
000419 93ec      	ST   X,R30
00041a 01f9      	MOVW R30,R18
                 _0x20C0001:
00041b 940e 0655 	CALL __LOADLOCR4
00041d 962a      	ADIW R28,10
00041e 90ff      	POP  R15
00041f 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000420 93ba      	ST   -Y,R27
000421 93aa      	ST   -Y,R26
000422 91a9          ld   r26,y+
000423 91b9          ld   r27,y+
000424 27ee          clr  r30
000425 27ff          clr  r31
                 strlen0:
000426 916d          ld   r22,x+
000427 2366          tst  r22
000428 f011          breq strlen1
000429 9631          adiw r30,1
00042a cffb          rjmp strlen0
                 strlen1:
00042b 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00042c 93ba      	ST   -Y,R27
00042d 93aa      	ST   -Y,R26
00042e 27aa          clr  r26
00042f 27bb          clr  r27
000430 91e9          ld   r30,y+
000431 91f9          ld   r31,y+
                 strlenf0:
000432 9005      	lpm  r0,z+
000433 2000          tst  r0
000434 f011          breq strlenf1
000435 9611          adiw r26,1
000436 cffb          rjmp strlenf0
                 strlenf1:
000437 01fd          movw r30,r26
000438 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _prima:
000500           	.BYTE 0x2
                 _led:
000502           	.BYTE 0x2
                 _textbuff:
000504           	.BYTE 0x10
                 _nama:
000514           	.BYTE 0x10
                 __base_y_G100:
000524           	.BYTE 0x4
                 __lcd_x:
000528           	.BYTE 0x1
                 __lcd_y:
000529           	.BYTE 0x1
                 __lcd_maxx:
00052a           	.BYTE 0x1
                 __seed_G105:
00052b           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000439 e0e4      	LDI  R30,LOW(_textbuff)
00043a e0f5      	LDI  R31,HIGH(_textbuff)
00043b 93fa      	ST   -Y,R31
00043c 93ea      	ST   -Y,R30
00043d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
00043e 93fa      	ST   -Y,R31
00043f 93ea      	ST   -Y,R30
000440 01f6      	MOVW R30,R12
000441 940e 05fd 	CALL __CWD1
000443 940e 0630 	CALL __PUTPARD1
000445 e084      	LDI  R24,4
000446 940e 03ec 	CALL _sprintf
000448 9628      	ADIW R28,8
000449 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
00044a 93ea      	ST   -Y,R30
00044b e0a1      	LDI  R26,LOW(1)
00044c 940e 01f9 	CALL _lcd_gotoxy
00044e e0a4      	LDI  R26,LOW(_textbuff)
00044f e0b5      	LDI  R27,HIGH(_textbuff)
000450 940c 0238 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
000452 e0a0      	LDI  R26,LOW(0)
000453 940e 01f9 	CALL _lcd_gotoxy
000455 e1a4      	LDI  R26,LOW(_nama)
000456 e0b5      	LDI  R27,HIGH(_nama)
000457 940e 0238 	CALL _lcd_puts
000459 e0e0      	LDI  R30,LOW(0)
00045a cfef      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00045b 940e 01ed 	CALL __lcd_write_data
00045d e0a3      	LDI  R26,LOW(3)
00045e e0b0      	LDI  R27,0
00045f 940c 0495 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
000461 e3a0      	LDI  R26,LOW(48)
000462 940e 01d9 	CALL __lcd_write_nibble_G100
                +
000464 ef8a     +LDI R24 , LOW ( 250 )
000465 e090     +LDI R25 , HIGH ( 250 )
                +__DELAY_USW_LOOP :
000466 9701     +SBIW R24 , 1
000467 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 250
000468 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6:
000469 932a      	ST   -Y,R18
00046a 85ad      	LDD  R26,Y+13
00046b 85be      	LDD  R27,Y+13+1
00046c 85ef      	LDD  R30,Y+15
00046d 89f8      	LDD  R31,Y+15+1
00046e 9509      	ICALL
00046f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x7:
000470 89e8      	LDD  R30,Y+16
000471 89f9      	LDD  R31,Y+16+1
000472 9734      	SBIW R30,4
000473 8be8      	STD  Y+16,R30
000474 8bf9      	STD  Y+16+1,R31
000475 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
000476 85ad      	LDD  R26,Y+13
000477 85be      	LDD  R27,Y+13+1
000478 85ef      	LDD  R30,Y+15
000479 89f8      	LDD  R31,Y+15+1
00047a 9509      	ICALL
00047b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
00047c 89a8      	LDD  R26,Y+16
00047d 89b9      	LDD  R27,Y+16+1
00047e 9614      	ADIW R26,4
00047f 940e 0628 	CALL __GETW1P
000481 83ee      	STD  Y+6,R30
000482 83ff      	STD  Y+6+1,R31
000483 81ae      	LDD  R26,Y+6
000484 81bf      	LDD  R27,Y+6+1
000485 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
000486 89a8      	LDD  R26,Y+16
000487 89b9      	LDD  R27,Y+16+1
000488 9614      	ADIW R26,4
000489 940e 0628 	CALL __GETW1P
00048b 87ea      	STD  Y+10,R30
00048c 87fb      	STD  Y+10+1,R31
00048d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
00048e 01de      	MOVW R26,R28
00048f 961c      	ADIW R26,12
000490 940e 05ed 	CALL __ADDW2R15
000492 940e 0628 	CALL __GETW1P
000494 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000495 9610      	adiw r26,0
000496 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000497 ec84     +LDI R24 , LOW ( 0x9C4 )
000498 e099     +LDI R25 , HIGH ( 0x9C4 )
                +__DELAY_USW_LOOP :
000499 9701     +SBIW R24 , 1
00049a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x9C4
00049b 95a8      	wdr
00049c 9711      	sbiw r26,1
00049d f7c9      	brne __delay_ms0
                 __delay_ms1:
00049e 9508      	ret
                 
                 __ROUND_REPACK:
00049f 2355      	TST  R21
0004a0 f442      	BRPL __REPACK
0004a1 3850      	CPI  R21,0x80
0004a2 f411      	BRNE __ROUND_REPACK0
0004a3 ffe0      	SBRS R30,0
0004a4 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0004a5 9631      	ADIW R30,1
0004a6 1f69      	ADC  R22,R25
0004a7 1f79      	ADC  R23,R25
0004a8 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0004a9 e850      	LDI  R21,0x80
0004aa 2757      	EOR  R21,R23
0004ab f411      	BRNE __REPACK0
0004ac 935f      	PUSH R21
0004ad c091      	RJMP __ZERORES
                 __REPACK0:
0004ae 3f5f      	CPI  R21,0xFF
0004af f031      	BREQ __REPACK1
0004b0 0f66      	LSL  R22
0004b1 0c00      	LSL  R0
0004b2 9557      	ROR  R21
0004b3 9567      	ROR  R22
0004b4 2f75      	MOV  R23,R21
0004b5 9508      	RET
                 __REPACK1:
0004b6 935f      	PUSH R21
0004b7 2000      	TST  R0
0004b8 f00a      	BRMI __REPACK2
0004b9 c091      	RJMP __MAXRES
                 __REPACK2:
0004ba c08a      	RJMP __MINRES
                 
                 __UNPACK:
0004bb e850      	LDI  R21,0x80
0004bc 2e19      	MOV  R1,R25
0004bd 2215      	AND  R1,R21
0004be 0f88      	LSL  R24
0004bf 1f99      	ROL  R25
0004c0 2795      	EOR  R25,R21
0004c1 0f55      	LSL  R21
0004c2 9587      	ROR  R24
                 
                 __UNPACK1:
0004c3 e850      	LDI  R21,0x80
0004c4 2e07      	MOV  R0,R23
0004c5 2205      	AND  R0,R21
0004c6 0f66      	LSL  R22
0004c7 1f77      	ROL  R23
0004c8 2775      	EOR  R23,R21
0004c9 0f55      	LSL  R21
0004ca 9567      	ROR  R22
0004cb 9508      	RET
                 
                 __CDF1U:
0004cc 9468      	SET
0004cd c001      	RJMP __CDF1U0
                 __CDF1:
0004ce 94e8      	CLT
                 __CDF1U0:
0004cf 9730      	SBIW R30,0
0004d0 4060      	SBCI R22,0
0004d1 4070      	SBCI R23,0
0004d2 f0b1      	BREQ __CDF10
0004d3 2400      	CLR  R0
0004d4 f026      	BRTS __CDF11
0004d5 2377      	TST  R23
0004d6 f412      	BRPL __CDF11
0004d7 9400      	COM  R0
0004d8 d11c      	RCALL __ANEGD1
                 __CDF11:
0004d9 2e17      	MOV  R1,R23
0004da e17e      	LDI  R23,30
0004db 2011      	TST  R1
                 __CDF12:
0004dc f032      	BRMI __CDF13
0004dd 957a      	DEC  R23
0004de 0fee      	LSL  R30
0004df 1fff      	ROL  R31
0004e0 1f66      	ROL  R22
0004e1 1c11      	ROL  R1
0004e2 cff9      	RJMP __CDF12
                 __CDF13:
0004e3 2fef      	MOV  R30,R31
0004e4 2ff6      	MOV  R31,R22
0004e5 2d61      	MOV  R22,R1
0004e6 935f      	PUSH R21
0004e7 dfc1      	RCALL __REPACK
0004e8 915f      	POP  R21
                 __CDF10:
0004e9 9508      	RET
                 
                 __SWAPACC:
0004ea 934f      	PUSH R20
0004eb 01af      	MOVW R20,R30
0004ec 01fd      	MOVW R30,R26
0004ed 01da      	MOVW R26,R20
0004ee 01ab      	MOVW R20,R22
0004ef 01bc      	MOVW R22,R24
0004f0 01ca      	MOVW R24,R20
0004f1 2d40      	MOV  R20,R0
0004f2 2c01      	MOV  R0,R1
0004f3 2e14      	MOV  R1,R20
0004f4 914f      	POP  R20
0004f5 9508      	RET
                 
                 __UADD12:
0004f6 0fea      	ADD  R30,R26
0004f7 1ffb      	ADC  R31,R27
0004f8 1f68      	ADC  R22,R24
0004f9 9508      	RET
                 
                 __NEGMAN1:
0004fa 95e0      	COM  R30
0004fb 95f0      	COM  R31
0004fc 9560      	COM  R22
0004fd 5fef      	SUBI R30,-1
0004fe 4fff      	SBCI R31,-1
0004ff 4f6f      	SBCI R22,-1
000500 9508      	RET
                 
                 __ADDF12:
000501 935f      	PUSH R21
000502 dfb8      	RCALL __UNPACK
000503 3890      	CPI  R25,0x80
000504 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000505 3870      	CPI  R23,0x80
000506 f121      	BREQ __ADDF128
                 __ADDF121:
000507 2f57      	MOV  R21,R23
000508 1b59      	SUB  R21,R25
000509 f12b      	BRVS __ADDF1211
00050a f412      	BRPL __ADDF122
00050b dfde      	RCALL __SWAPACC
00050c cffa      	RJMP __ADDF121
                 __ADDF122:
00050d 3158      	CPI  R21,24
00050e f018      	BRLO __ADDF123
00050f 27aa      	CLR  R26
000510 27bb      	CLR  R27
000511 2788      	CLR  R24
                 __ADDF123:
000512 3058      	CPI  R21,8
000513 f028      	BRLO __ADDF124
000514 2fab      	MOV  R26,R27
000515 2fb8      	MOV  R27,R24
000516 2788      	CLR  R24
000517 5058      	SUBI R21,8
000518 cff9      	RJMP __ADDF123
                 __ADDF124:
000519 2355      	TST  R21
00051a f029      	BREQ __ADDF126
                 __ADDF125:
00051b 9586      	LSR  R24
00051c 95b7      	ROR  R27
00051d 95a7      	ROR  R26
00051e 955a      	DEC  R21
00051f f7d9      	BRNE __ADDF125
                 __ADDF126:
000520 2d50      	MOV  R21,R0
000521 2551      	EOR  R21,R1
000522 f072      	BRMI __ADDF127
000523 dfd2      	RCALL __UADD12
000524 f438      	BRCC __ADDF129
000525 9567      	ROR  R22
000526 95f7      	ROR  R31
000527 95e7      	ROR  R30
000528 9573      	INC  R23
000529 f413      	BRVC __ADDF129
00052a c020      	RJMP __MAXRES
                 __ADDF128:
00052b dfbe      	RCALL __SWAPACC
                 __ADDF129:
00052c df7c      	RCALL __REPACK
00052d 915f      	POP  R21
00052e 9508      	RET
                 __ADDF1211:
00052f f7d8      	BRCC __ADDF128
000530 cffb      	RJMP __ADDF129
                 __ADDF127:
000531 1bea      	SUB  R30,R26
000532 0bfb      	SBC  R31,R27
000533 0b68      	SBC  R22,R24
000534 f051      	BREQ __ZERORES
000535 f410      	BRCC __ADDF1210
000536 9400      	COM  R0
000537 dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
000538 2366      	TST  R22
000539 f392      	BRMI __ADDF129
00053a 0fee      	LSL  R30
00053b 1fff      	ROL  R31
00053c 1f66      	ROL  R22
00053d 957a      	DEC  R23
00053e f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
00053f 27ee      	CLR  R30
000540 27ff      	CLR  R31
000541 2766      	CLR  R22
000542 2777      	CLR  R23
000543 915f      	POP  R21
000544 9508      	RET
                 
                 __MINRES:
000545 efef      	SER  R30
000546 efff      	SER  R31
000547 e76f      	LDI  R22,0x7F
000548 ef7f      	SER  R23
000549 915f      	POP  R21
00054a 9508      	RET
                 
                 __MAXRES:
00054b efef      	SER  R30
00054c efff      	SER  R31
00054d e76f      	LDI  R22,0x7F
00054e e77f      	LDI  R23,0x7F
00054f 915f      	POP  R21
000550 9508      	RET
                 
                 __DIVF21:
000551 935f      	PUSH R21
000552 df68      	RCALL __UNPACK
000553 3870      	CPI  R23,0x80
000554 f421      	BRNE __DIVF210
000555 2011      	TST  R1
                 __DIVF211:
000556 f40a      	BRPL __DIVF219
000557 cfed      	RJMP __MINRES
                 __DIVF219:
000558 cff2      	RJMP __MAXRES
                 __DIVF210:
000559 3890      	CPI  R25,0x80
00055a f409      	BRNE __DIVF218
                 __DIVF217:
00055b cfe3      	RJMP __ZERORES
                 __DIVF218:
00055c 2401      	EOR  R0,R1
00055d 9408      	SEC
00055e 0b97      	SBC  R25,R23
00055f f41b      	BRVC __DIVF216
000560 f3d4      	BRLT __DIVF217
000561 2000      	TST  R0
000562 cff3      	RJMP __DIVF211
                 __DIVF216:
000563 2f79      	MOV  R23,R25
000564 931f      	PUSH R17
000565 932f      	PUSH R18
000566 933f      	PUSH R19
000567 934f      	PUSH R20
000568 2411      	CLR  R1
000569 2711      	CLR  R17
00056a 2722      	CLR  R18
00056b 2733      	CLR  R19
00056c 2744      	CLR  R20
00056d 2755      	CLR  R21
00056e e290      	LDI  R25,32
                 __DIVF212:
00056f 17ae      	CP   R26,R30
000570 07bf      	CPC  R27,R31
000571 0786      	CPC  R24,R22
000572 0741      	CPC  R20,R17
000573 f030      	BRLO __DIVF213
000574 1bae      	SUB  R26,R30
000575 0bbf      	SBC  R27,R31
000576 0b86      	SBC  R24,R22
000577 0b41      	SBC  R20,R17
000578 9408      	SEC
000579 c001      	RJMP __DIVF214
                 __DIVF213:
00057a 9488      	CLC
                 __DIVF214:
00057b 1f55      	ROL  R21
00057c 1f22      	ROL  R18
00057d 1f33      	ROL  R19
00057e 1c11      	ROL  R1
00057f 1faa      	ROL  R26
000580 1fbb      	ROL  R27
000581 1f88      	ROL  R24
000582 1f44      	ROL  R20
000583 959a      	DEC  R25
000584 f751      	BRNE __DIVF212
000585 01f9      	MOVW R30,R18
000586 2d61      	MOV  R22,R1
000587 914f      	POP  R20
000588 913f      	POP  R19
000589 912f      	POP  R18
00058a 911f      	POP  R17
00058b 2366      	TST  R22
00058c f032      	BRMI __DIVF215
00058d 0f55      	LSL  R21
00058e 1fee      	ROL  R30
00058f 1fff      	ROL  R31
000590 1f66      	ROL  R22
000591 957a      	DEC  R23
000592 f243      	BRVS __DIVF217
                 __DIVF215:
000593 df0b      	RCALL __ROUND_REPACK
000594 915f      	POP  R21
000595 9508      	RET
                 
                 __CMPF12:
000596 2399      	TST  R25
000597 f09a      	BRMI __CMPF120
000598 2377      	TST  R23
000599 f042      	BRMI __CMPF121
00059a 1797      	CP   R25,R23
00059b f048      	BRLO __CMPF122
00059c f429      	BRNE __CMPF121
00059d 17ae      	CP   R26,R30
00059e 07bf      	CPC  R27,R31
00059f 0786      	CPC  R24,R22
0005a0 f020      	BRLO __CMPF122
0005a1 f031      	BREQ __CMPF123
                 __CMPF121:
0005a2 9498      	CLZ
0005a3 9488      	CLC
0005a4 9508      	RET
                 __CMPF122:
0005a5 9498      	CLZ
0005a6 9408      	SEC
0005a7 9508      	RET
                 __CMPF123:
0005a8 9418      	SEZ
0005a9 9488      	CLC
0005aa 9508      	RET
                 __CMPF120:
0005ab 2377      	TST  R23
0005ac f7c2      	BRPL __CMPF122
0005ad 1797      	CP   R25,R23
0005ae f398      	BRLO __CMPF121
0005af f7a9      	BRNE __CMPF122
0005b0 17ea      	CP   R30,R26
0005b1 07fb      	CPC  R31,R27
0005b2 0768      	CPC  R22,R24
0005b3 f388      	BRLO __CMPF122
0005b4 f399      	BREQ __CMPF123
0005b5 cfec      	RJMP __CMPF121
                 
                 _sqrt:
0005b6 d07e      	rcall __PUTPARD2
0005b7 9724      	sbiw r28,4
0005b8 935f      	push r21
0005b9 819f      	ldd  r25,y+7
0005ba 2399      	tst  r25
0005bb f411      	brne __sqrt0
0005bc 9628      	adiw r28,8
0005bd cf81      	rjmp __zerores
                 __sqrt0:
0005be f412      	brpl __sqrt1
0005bf 9628      	adiw r28,8
0005c0 cf8a      	rjmp __maxres
                 __sqrt1:
0005c1 934f      	push r20
0005c2 e442      	ldi  r20,66
0005c3 818e      	ldd  r24,y+6
0005c4 81bd      	ldd  r27,y+5
0005c5 81ac      	ldd  r26,y+4
                 __sqrt2:
0005c6 8388      	st   y,r24
0005c7 8399      	std  y+1,r25
0005c8 83aa      	std  y+2,r26
0005c9 83bb      	std  y+3,r27
0005ca 01fd      	movw r30,r26
0005cb 01bc      	movw r22,r24
0005cc 81ac      	ldd  r26,y+4
0005cd 81bd      	ldd  r27,y+5
0005ce 818e      	ldd  r24,y+6
0005cf 819f      	ldd  r25,y+7
0005d0 df80      	rcall __divf21
0005d1 8188      	ld   r24,y
0005d2 8199      	ldd  r25,y+1
0005d3 81aa      	ldd  r26,y+2
0005d4 81bb      	ldd  r27,y+3
0005d5 df2b      	rcall __addf12
0005d6 deec      	rcall __unpack1
0005d7 957a      	dec  r23
0005d8 ded0      	rcall __repack
0005d9 8188      	ld   r24,y
0005da 8199      	ldd  r25,y+1
0005db 81aa      	ldd  r26,y+2
0005dc 81bb      	ldd  r27,y+3
0005dd 27ae      	eor  r26,r30
0005de 7fa8      	andi r26,0xf8
0005df f421      	brne __sqrt4
0005e0 17bf      	cp   r27,r31
0005e1 0786      	cpc  r24,r22
0005e2 0797      	cpc  r25,r23
0005e3 f029      	breq __sqrt3
                 __sqrt4:
0005e4 954a      	dec  r20
0005e5 f019      	breq __sqrt3
0005e6 01df      	movw r26,r30
0005e7 01cb      	movw r24,r22
0005e8 cfdd      	rjmp __sqrt2
                 __sqrt3:
0005e9 914f      	pop  r20
0005ea 915f      	pop  r21
0005eb 9628      	adiw r28,8
0005ec 9508      	ret
                 
                 __ADDW2R15:
0005ed 2400      	CLR  R0
0005ee 0daf      	ADD  R26,R15
0005ef 1db0      	ADC  R27,R0
0005f0 9508      	RET
                 
                 __ANEGW1:
0005f1 95f1      	NEG  R31
0005f2 95e1      	NEG  R30
0005f3 40f0      	SBCI R31,0
0005f4 9508      	RET
                 
                 __ANEGD1:
0005f5 95f0      	COM  R31
0005f6 9560      	COM  R22
0005f7 9570      	COM  R23
0005f8 95e1      	NEG  R30
0005f9 4fff      	SBCI R31,-1
0005fa 4f6f      	SBCI R22,-1
0005fb 4f7f      	SBCI R23,-1
0005fc 9508      	RET
                 
                 __CWD1:
0005fd 2f6f      	MOV  R22,R31
0005fe 0f66      	ADD  R22,R22
0005ff 0b66      	SBC  R22,R22
000600 2f76      	MOV  R23,R22
000601 9508      	RET
                 
                 __CWD2:
000602 2f8b      	MOV  R24,R27
000603 0f88      	ADD  R24,R24
000604 0b88      	SBC  R24,R24
000605 2f98      	MOV  R25,R24
000606 9508      	RET
                 
                 __DIVW21U:
000607 2400      	CLR  R0
000608 2411      	CLR  R1
000609 e190      	LDI  R25,16
                 __DIVW21U1:
00060a 0faa      	LSL  R26
00060b 1fbb      	ROL  R27
00060c 1c00      	ROL  R0
00060d 1c11      	ROL  R1
00060e 1a0e      	SUB  R0,R30
00060f 0a1f      	SBC  R1,R31
000610 f418      	BRCC __DIVW21U2
000611 0e0e      	ADD  R0,R30
000612 1e1f      	ADC  R1,R31
000613 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000614 60a1      	SBR  R26,1
                 __DIVW21U3:
000615 959a      	DEC  R25
000616 f799      	BRNE __DIVW21U1
000617 01fd      	MOVW R30,R26
000618 01d0      	MOVW R26,R0
000619 9508      	RET
                 
                 __MODW21:
00061a 94e8      	CLT
00061b ffb7      	SBRS R27,7
00061c c004      	RJMP __MODW211
00061d 95a0      	COM  R26
00061e 95b0      	COM  R27
00061f 9611      	ADIW R26,1
000620 9468      	SET
                 __MODW211:
000621 fdf7      	SBRC R31,7
000622 dfce      	RCALL __ANEGW1
000623 dfe3      	RCALL __DIVW21U
000624 01fd      	MOVW R30,R26
000625 f40e      	BRTC __MODW212
000626 dfca      	RCALL __ANEGW1
                 __MODW212:
000627 9508      	RET
                 
                 __GETW1P:
000628 91ed      	LD   R30,X+
000629 91fc      	LD   R31,X
00062a 9711      	SBIW R26,1
00062b 9508      	RET
                 
                 __GETW1PF:
00062c 9005      	LPM  R0,Z+
00062d 91f4      	LPM  R31,Z
00062e 2de0      	MOV  R30,R0
00062f 9508      	RET
                 
                 __PUTPARD1:
000630 937a      	ST   -Y,R23
000631 936a      	ST   -Y,R22
000632 93fa      	ST   -Y,R31
000633 93ea      	ST   -Y,R30
000634 9508      	RET
                 
                 __PUTPARD2:
000635 939a      	ST   -Y,R25
000636 938a      	ST   -Y,R24
000637 93ba      	ST   -Y,R27
000638 93aa      	ST   -Y,R26
000639 9508      	RET
                 
                 __CDF2U:
00063a 9468      	SET
00063b c001      	RJMP __CDF2U0
                 __CDF2:
00063c 94e8      	CLT
                 __CDF2U0:
00063d d001      	RCALL __SWAPD12
00063e de90      	RCALL __CDF1U0
                 
                 __SWAPD12:
00063f 2e18      	MOV  R1,R24
000640 2f86      	MOV  R24,R22
000641 2d61      	MOV  R22,R1
000642 2e19      	MOV  R1,R25
000643 2f97      	MOV  R25,R23
000644 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000645 2e1b      	MOV  R1,R27
000646 2fbf      	MOV  R27,R31
000647 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000648 2e1a      	MOV  R1,R26
000649 2fae      	MOV  R26,R30
00064a 2de1      	MOV  R30,R1
00064b 9508      	RET
                 
                 __SAVELOCR6:
00064c 935a      	ST   -Y,R21
                 __SAVELOCR5:
00064d 934a      	ST   -Y,R20
                 __SAVELOCR4:
00064e 933a      	ST   -Y,R19
                 __SAVELOCR3:
00064f 932a      	ST   -Y,R18
                 __SAVELOCR2:
000650 931a      	ST   -Y,R17
000651 930a      	ST   -Y,R16
000652 9508      	RET
                 
                 __LOADLOCR6:
000653 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000654 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000655 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000656 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000657 8119      	LDD  R17,Y+1
000658 8108      	LD   R16,Y
000659 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  32 r1 :  29 r2 :   0 r3 :   0 r4 :   5 r5 :   2 r6 :   5 r7 :   1 
r8 :   5 r9 :   0 r10:   7 r11:   2 r12:   5 r13:   1 r14:   0 r15:   6 
r16:  34 r17:  29 r18:  34 r19:  12 r20:  27 r21:  57 r22:  49 r23:  36 
r24:  60 r25:  35 r26: 148 r27:  68 r28:  19 r29:   1 r30: 325 r31: 105 
x  :  23 y  : 225 z  :  15 
Registers used: 31 out of 35 (88.6%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :   7 
adiw  :  33 and   :   2 andi  :   7 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   1 break :   0 breq  :  28 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  15 
brlt  :   3 brmi  :   8 brne  :  46 brpl  :   7 brsh  :   2 brtc  :   1 
brts  :   1 brvc  :   3 brvs  :   3 bset  :   0 bst   :   0 call  :  70 
cbi   :   6 cbr   :   0 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  26 cls   :   0 clt   :   3 clv   :   0 clz   :   2 com   :  10 
cp    :  14 cpc   :  15 cpi   :  42 cpse  :   0 dec   :  13 des   :   0 
elpm  :   0 eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   4 inc   :   1 jmp   :  38 ld    :  44 ldd   :  89 
ldi   : 151 lds   :   7 lpm   :  14 lsl   :  10 lsr   :   1 mov   :  47 
movw  :  47 mul   :   1 muls  :   0 mulsu :   0 neg   :   3 nop   :   0 
or    :   2 ori   :   7 out   :  46 pop   :  14 push  :  13 rcall :  37 
ret   :  48 reti  :   2 rjmp  :  90 rol   :  21 ror   :   9 sbc   :  10 
sbci  :   9 sbi   :   6 sbic  :   1 sbis  :   0 sbiw  :  24 sbr   :   1 
sbrc  :   3 sbrs  :  12 sec   :   3 seh   :   0 sei   :   1 sen   :   0 
ser   :   5 ses   :   0 set   :   3 sev   :   0 sez   :   1 sleep :   0 
spm   :   0 st    :  84 std   :  34 sts   :  40 sub   :   5 subi  :  20 
swap  :   1 tst   :  17 wdr   :   1 
Instructions used: 79 out of 117 (67.5%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000cb4   3144    108   3252  131072   2.5%
[.dseg] 0x000100 0x00052f      0     47     47    4096   1.1%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 13 warnings
