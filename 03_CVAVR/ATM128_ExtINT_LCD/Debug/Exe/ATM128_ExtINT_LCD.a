;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 10/6/2021
;Author  : Gesha
;Company : Universitas Indonesia
;Comments:
;
;
;Chip type               : ATmega128
;Program type            : Application
;AVR Core Clock frequency: 10.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*******************************************************/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;//Delay function
;#include <delay.h>
;#include <stdio.h>
;#include <string.h>
;#include <sleep.h>
;
;// Declare your global variables here
;char text_fis[16]= {20,20,20,'F','I','S','I','K','A','-','-','U','I',20,20,20};

	.DSEG
;unsigned char i, iterasi;
;unsigned int jumlah=0; //
;char textbuffer[16];
;
;void start_timer(void)
; 0000 002A     {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002B         TCNT1H = 0x00;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 002C         TCNT1L = 0x00;      //inisialisasi Timer1 = 0x0000
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 002D         iterasi = 0;
;PCODE: $00000013 VOL: 0
; 0000 002E         TCCR1B = 0x0C;      //Start Timer1
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002F     }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;
;void stop_timer(void)
; 0000 0032     {
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0033         TCCR1B = 0x00;       //matikan Timer1
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0034     }
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0038 {
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0039 // Place your code here
; 0000 003A stop_timer();
;PCODE: $00000020 VOL: 0
; 0000 003B jumlah++; //jumlah=jumlah+1
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 003C lcd_gotoxy(0,1);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 003D sprintf(textbuffer,"Counter= %-5d", jumlah);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003E lcd_puts(textbuffer);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 003F start_timer();
;PCODE: $00000036 VOL: 0
; 0000 0040 }
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0044 {
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0045 // Place your code here
; 0000 0046 stop_timer();
;PCODE: $0000003C VOL: 0
; 0000 0047 if (jumlah>0)jumlah--;//jumlah=jumlah-1
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0048 lcd_gotoxy(0,1);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0049 sprintf(textbuffer,"Counter= %-5d", jumlah);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 004A lcd_puts(textbuffer);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 004B start_timer();
;PCODE: $00000055 VOL: 0
; 0000 004C }
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;
;// Timer1 output compare A interrupt service routine
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 0050 {
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0051 // Place your code here
; 0000 0052 iterasi++;  //iterasi = iterasi + 1
;PCODE: $0000005B VOL: 0
; 0000 0053 if (iterasi == 10)
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0054     {
; 0000 0055         lcd_gotoxy(0,1);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0056         lcd_putsf("Capek deh...!");
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0057         TCCR1B = 0x00;              //matikan Timer1
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0058         idle();                     //sleep mode
;PCODE: $00000068 VOL: 0
; 0000 0059     };
;PCODE: $00000069 VOL: 0
; 0000 005A 
; 0000 005B }
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;
;void main(void)
; 0000 005E {
;PCODE: $0000006D VOL: 0
; 0000 005F // Declare your local variables here
; 0000 0060 
; 0000 0061 // Input/Output Ports initialization
; 0000 0062 // Port A initialization
; 0000 0063 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0064 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0065 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0066 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0067 
; 0000 0068 // Port B initialization
; 0000 0069 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 006A DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 006B // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 006C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 006D 
; 0000 006E // Port C initialization
; 0000 006F // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0070 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0071 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0072 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0073 
; 0000 0074 // Port D initialization
; 0000 0075 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0076 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0077 // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
; 0000 0078 PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0079 
; 0000 007A // Port E initialization
; 0000 007B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 007C DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 007D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 007E PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 007F 
; 0000 0080 // Port F initialization
; 0000 0081 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0082 DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0083 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0084 PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0085 
; 0000 0086 // Port G initialization
; 0000 0087 // Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0088 DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0089 // State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 008A PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 008B 
; 0000 008C // Timer/Counter 0 initialization
; 0000 008D // Clock source: System Clock
; 0000 008E // Clock value: Timer 0 Stopped
; 0000 008F // Mode: Normal top=0xFF
; 0000 0090 // OC0 output: Disconnected
; 0000 0091 ASSR=0<<AS0;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0092 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0093 TCNT0=0x00;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0094 OCR0=0x00;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0095 
; 0000 0096 // Timer/Counter 1 initialization
; 0000 0097 // Clock source: System Clock
; 0000 0098 // Clock value: 39.063 kHz
; 0000 0099 // Mode: CTC top=OCR1A
; 0000 009A // OC1A output: Disconnected
; 0000 009B // OC1B output: Disconnected
; 0000 009C // OC1C output: Disconnected
; 0000 009D // Noise Canceler: Off
; 0000 009E // Input Capture on Falling Edge
; 0000 009F // Timer Period: 1 s
; 0000 00A0 // Timer1 Overflow Interrupt: Off
; 0000 00A1 // Input Capture Interrupt: Off
; 0000 00A2 // Compare A Match Interrupt: On
; 0000 00A3 // Compare B Match Interrupt: Off
; 0000 00A4 // Compare C Match Interrupt: Off
; 0000 00A5 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00A6 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00A7 TCNT1H=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00A8 TCNT1L=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00A9 ICR1H=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00AA ICR1L=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00AB OCR1AH=0x98;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00AC OCR1AL=0x96;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00AD OCR1BH=0x00;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00AE OCR1BL=0x00;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00AF OCR1CH=0x00;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00B0 OCR1CL=0x00;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00B1 
; 0000 00B2 // Timer/Counter 2 initialization
; 0000 00B3 // Clock source: System Clock
; 0000 00B4 // Clock value: Timer2 Stopped
; 0000 00B5 // Mode: Normal top=0xFF
; 0000 00B6 // OC2 output: Disconnected
; 0000 00B7 TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00B8 TCNT2=0x00;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00B9 OCR2=0x00;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00BA 
; 0000 00BB // Timer/Counter 3 initialization
; 0000 00BC // Clock source: System Clock
; 0000 00BD // Clock value: Timer3 Stopped
; 0000 00BE // Mode: Normal top=0xFFFF
; 0000 00BF // OC3A output: Disconnected
; 0000 00C0 // OC3B output: Disconnected
; 0000 00C1 // OC3C output: Disconnected
; 0000 00C2 // Noise Canceler: Off
; 0000 00C3 // Input Capture on Falling Edge
; 0000 00C4 // Timer3 Overflow Interrupt: Off
; 0000 00C5 // Input Capture Interrupt: Off
; 0000 00C6 // Compare A Match Interrupt: Off
; 0000 00C7 // Compare B Match Interrupt: Off
; 0000 00C8 // Compare C Match Interrupt: Off
; 0000 00C9 TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00CA TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00CB TCNT3H=0x00;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00CC TCNT3L=0x00;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00CD ICR3H=0x00;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00CE ICR3L=0x00;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00CF OCR3AH=0x00;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00D0 OCR3AL=0x00;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00D1 OCR3BH=0x00;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00D2 OCR3BL=0x00;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00D3 OCR3CH=0x00;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00D4 OCR3CL=0x00;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00D5 
; 0000 00D6 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00D7 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00D8 ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00D9 
; 0000 00DA // External Interrupt(s) initialization
; 0000 00DB // INT0: On
; 0000 00DC // INT0 Mode: Falling Edge
; 0000 00DD // INT1: On
; 0000 00DE // INT1 Mode: Falling Edge
; 0000 00DF // INT2: Off
; 0000 00E0 // INT3: Off
; 0000 00E1 // INT4: Off
; 0000 00E2 // INT5: Off
; 0000 00E3 // INT6: Off
; 0000 00E4 // INT7: Off
; 0000 00E5 EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00E6 EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00E7 EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (1<<INT1) | (1<<INT0);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00E8 EIFR=(0<<INTF7) | (0<<INTF6) | (0<<INTF5) | (0<<INTF4) | (0<<INTF3) | (0<<INTF2) | (1<<INTF1) | (1<<INTF0);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00E9 
; 0000 00EA // USART0 initialization
; 0000 00EB // USART0 disabled
; 0000 00EC UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00ED 
; 0000 00EE // USART1 initialization
; 0000 00EF // USART1 disabled
; 0000 00F0 UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00F1 
; 0000 00F2 // Analog Comparator initialization
; 0000 00F3 // Analog Comparator: Off
; 0000 00F4 // The Analog Comparator's positive input is
; 0000 00F5 // connected to the AIN0 pin
; 0000 00F6 // The Analog Comparator's negative input is
; 0000 00F7 // connected to the AIN1 pin
; 0000 00F8 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00F9 SFIOR=(0<<ACME);
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00FA 
; 0000 00FB // ADC initialization
; 0000 00FC // ADC disabled
; 0000 00FD ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00FE 
; 0000 00FF // SPI initialization
; 0000 0100 // SPI disabled
; 0000 0101 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0102 
; 0000 0103 // TWI initialization
; 0000 0104 // TWI disabled
; 0000 0105 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0106 
; 0000 0107 // Alphanumeric LCD initialization
; 0000 0108 // Connections are specified in the
; 0000 0109 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 010A // RS - PORTC Bit 0
; 0000 010B // RD - PORTC Bit 2
; 0000 010C // EN - PORTC Bit 1
; 0000 010D // D4 - PORTC Bit 4
; 0000 010E // D5 - PORTC Bit 5
; 0000 010F // D6 - PORTC Bit 6
; 0000 0110 // D7 - PORTC Bit 7
; 0000 0111 // Characters/line: 8
; 0000 0112 lcd_init(16);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0113 lcd_gotoxy(0,1);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0114 sprintf(textbuffer,"Counter= %-5d", jumlah);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0115 lcd_puts(textbuffer);
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 0116 // Global enable interrupts
; 0000 0117 #asm("sei")
;PCODE: $000000F6 VOL: 0
	sei
;PCODE: $000000F7 VOL: 0
; 0000 0118 sleep_enable();
;PCODE: $000000F8 VOL: 0
; 0000 0119 
; 0000 011A while (1)
;PCODE: $000000F9 VOL: 0
; 0000 011B       {
; 0000 011C       // Place your code here
; 0000 011D       for (i=0;i<=15;i++)
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 011E         {
; 0000 011F         lcd_gotoxy(i,0);
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0120         lcd_putchar(text_fis[i]);
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0121         delay_ms(100);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 0122         };
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0123       for (i=15;i>=1;i--)
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 0124         {
; 0000 0125         lcd_gotoxy(i,0);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0126         lcd_putchar(20); // atau lcd_putchar(' ');
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0127         delay_ms(100);
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0128         };
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0129       }
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 012A }
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
